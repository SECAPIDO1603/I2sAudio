// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : board_75e.v
// Device     : LFE5U-25F-6BG256C
// LiteX sha1 : 34ec22f8
// Date       : 2023-05-31 09:59:26
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module board_75e (
    output reg           serial_tx,
    input  wire          serial_rx,
    input  wire          i2s_pins0_i2s_sd_i,
    output wire          i2s_pins0_i2s_sd_o,
    output wire          i2s_pins0_i2s_sck_o,
    output wire          i2s_pins0_i2s_ws_o,
    output wire          user_led_n0,
    input  wire          clk25
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg           __main___soc_rst = 1'd0;
wire          __main___cpu_rst;
reg     [1:0] __main___reset_storage = 2'd0;
reg           __main___reset_re = 1'd0;
reg    [31:0] __main___scratch_storage = 32'd305419896;
reg           __main___scratch_re = 1'd0;
wire   [31:0] __main___bus_errors_status;
wire          __main___bus_errors_we;
reg           __main___bus_errors_re = 1'd0;
wire          __main___bus_error;
reg    [31:0] __main___bus_errors = 32'd0;
wire          __main___lm32_reset;
wire   [29:0] __main___lm32_ibus_adr;
wire   [31:0] __main___lm32_ibus_dat_w;
wire   [31:0] __main___lm32_ibus_dat_r;
wire    [3:0] __main___lm32_ibus_sel;
wire          __main___lm32_ibus_cyc;
wire          __main___lm32_ibus_stb;
wire          __main___lm32_ibus_ack;
wire          __main___lm32_ibus_we;
wire    [2:0] __main___lm32_ibus_cti;
wire    [1:0] __main___lm32_ibus_bte;
wire          __main___lm32_ibus_err;
wire   [29:0] __main___lm32_dbus_adr;
wire   [31:0] __main___lm32_dbus_dat_w;
wire   [31:0] __main___lm32_dbus_dat_r;
wire    [3:0] __main___lm32_dbus_sel;
wire          __main___lm32_dbus_cyc;
wire          __main___lm32_dbus_stb;
wire          __main___lm32_dbus_ack;
wire          __main___lm32_dbus_we;
wire    [2:0] __main___lm32_dbus_cti;
wire    [1:0] __main___lm32_dbus_bte;
wire          __main___lm32_dbus_err;
reg    [31:0] __main___lm32_interrupt = 32'd0;
wire    [1:0] __main___lm320;
wire    [1:0] __main___lm321;
wire   [29:0] __main___ram_bus_adr;
wire   [31:0] __main___ram_bus_dat_w;
wire   [31:0] __main___ram_bus_dat_r;
wire    [3:0] __main___ram_bus_sel;
wire          __main___ram_bus_cyc;
wire          __main___ram_bus_stb;
reg           __main___ram_bus_ack = 1'd0;
wire          __main___ram_bus_we;
wire    [2:0] __main___ram_bus_cti;
wire    [1:0] __main___ram_bus_bte;
reg           __main___ram_bus_err = 1'd0;
reg           __main___adr_burst = 1'd0;
wire   [12:0] __main___adr;
wire   [31:0] __main___dat_r;
wire   [29:0] __main___interface0_ram_bus_adr;
wire   [31:0] __main___interface0_ram_bus_dat_w;
wire   [31:0] __main___interface0_ram_bus_dat_r;
wire    [3:0] __main___interface0_ram_bus_sel;
wire          __main___interface0_ram_bus_cyc;
wire          __main___interface0_ram_bus_stb;
reg           __main___interface0_ram_bus_ack = 1'd0;
wire          __main___interface0_ram_bus_we;
wire    [2:0] __main___interface0_ram_bus_cti;
wire    [1:0] __main___interface0_ram_bus_bte;
reg           __main___interface0_ram_bus_err = 1'd0;
reg           __main___sram0_adr_burst = 1'd0;
wire   [10:0] __main___sram0_adr;
wire   [31:0] __main___sram0_dat_r;
reg     [3:0] __main___sram0_we = 4'd0;
wire   [31:0] __main___sram0_dat_w;
wire   [29:0] __main___interface1_ram_bus_adr;
wire   [31:0] __main___interface1_ram_bus_dat_w;
wire   [31:0] __main___interface1_ram_bus_dat_r;
wire    [3:0] __main___interface1_ram_bus_sel;
wire          __main___interface1_ram_bus_cyc;
wire          __main___interface1_ram_bus_stb;
reg           __main___interface1_ram_bus_ack = 1'd0;
wire          __main___interface1_ram_bus_we;
wire    [2:0] __main___interface1_ram_bus_cti;
wire    [1:0] __main___interface1_ram_bus_bte;
reg           __main___interface1_ram_bus_err = 1'd0;
reg           __main___sram1_adr_burst = 1'd0;
wire   [11:0] __main___sram1_adr;
wire   [31:0] __main___sram1_dat_r;
reg     [3:0] __main___sram1_we = 4'd0;
wire   [31:0] __main___sram1_dat_w;
wire          __main___tx_sink_valid;
reg           __main___tx_sink_ready = 1'd0;
wire          __main___tx_sink_first;
wire          __main___tx_sink_last;
wire    [7:0] __main___tx_sink_payload_data;
reg     [7:0] __main___tx_data = 8'd0;
reg     [3:0] __main___tx_count = 4'd0;
reg           __main___tx_enable = 1'd0;
reg           __main___tx_tick = 1'd0;
reg    [31:0] __main___tx_phase = 32'd0;
reg           __main___rx_source_valid = 1'd0;
wire          __main___rx_source_ready;
reg           __main___rx_source_first = 1'd0;
reg           __main___rx_source_last = 1'd0;
reg     [7:0] __main___rx_source_payload_data = 8'd0;
reg     [7:0] __main___rx_data = 8'd0;
reg     [3:0] __main___rx_count = 4'd0;
reg           __main___rx_enable = 1'd0;
reg           __main___rx_tick = 1'd0;
reg    [31:0] __main___rx_phase = 32'd0;
wire          __main___rx_rx;
reg           __main___rx_rx_d = 1'd0;
reg           __main___uart_rxtx_re = 1'd0;
wire    [7:0] __main___uart_rxtx_r;
reg           __main___uart_rxtx_we = 1'd0;
wire    [7:0] __main___uart_rxtx_w;
wire          __main___uart_txfull_status;
wire          __main___uart_txfull_we;
reg           __main___uart_txfull_re = 1'd0;
wire          __main___uart_rxempty_status;
wire          __main___uart_rxempty_we;
reg           __main___uart_rxempty_re = 1'd0;
wire          __main___uart_irq;
wire          __main___uart_tx_status;
reg           __main___uart_tx_pending = 1'd0;
wire          __main___uart_tx_trigger;
reg           __main___uart_tx_clear = 1'd0;
reg           __main___uart_tx_trigger_d = 1'd0;
wire          __main___uart_rx_status;
reg           __main___uart_rx_pending = 1'd0;
wire          __main___uart_rx_trigger;
reg           __main___uart_rx_clear = 1'd0;
reg           __main___uart_rx_trigger_d = 1'd0;
wire          __main___uart_tx0;
wire          __main___uart_rx0;
reg     [1:0] __main___uart_status_status = 2'd0;
wire          __main___uart_status_we;
reg           __main___uart_status_re = 1'd0;
wire          __main___uart_tx1;
wire          __main___uart_rx1;
reg     [1:0] __main___uart_pending_status = 2'd0;
wire          __main___uart_pending_we;
reg           __main___uart_pending_re = 1'd0;
reg     [1:0] __main___uart_pending_r = 2'd0;
wire          __main___uart_tx2;
wire          __main___uart_rx2;
reg     [1:0] __main___uart_enable_storage = 2'd0;
reg           __main___uart_enable_re = 1'd0;
wire          __main___uart_txempty_status;
wire          __main___uart_txempty_we;
reg           __main___uart_txempty_re = 1'd0;
wire          __main___uart_rxfull_status;
wire          __main___uart_rxfull_we;
reg           __main___uart_rxfull_re = 1'd0;
wire          __main___uart_uart_sink_valid;
wire          __main___uart_uart_sink_ready;
wire          __main___uart_uart_sink_first;
wire          __main___uart_uart_sink_last;
wire    [7:0] __main___uart_uart_sink_payload_data;
wire          __main___uart_uart_source_valid;
wire          __main___uart_uart_source_ready;
wire          __main___uart_uart_source_first;
wire          __main___uart_uart_source_last;
wire    [7:0] __main___uart_uart_source_payload_data;
wire          __main___uart_tx_fifo_sink_valid;
wire          __main___uart_tx_fifo_sink_ready;
reg           __main___uart_tx_fifo_sink_first = 1'd0;
reg           __main___uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] __main___uart_tx_fifo_sink_payload_data;
wire          __main___uart_tx_fifo_source_valid;
wire          __main___uart_tx_fifo_source_ready;
wire          __main___uart_tx_fifo_source_first;
wire          __main___uart_tx_fifo_source_last;
wire    [7:0] __main___uart_tx_fifo_source_payload_data;
wire          __main___uart_tx_fifo_re;
reg           __main___uart_tx_fifo_readable = 1'd0;
wire          __main___uart_tx_fifo_syncfifo_we;
wire          __main___uart_tx_fifo_syncfifo_writable;
wire          __main___uart_tx_fifo_syncfifo_re;
wire          __main___uart_tx_fifo_syncfifo_readable;
wire    [9:0] __main___uart_tx_fifo_syncfifo_din;
wire    [9:0] __main___uart_tx_fifo_syncfifo_dout;
reg     [4:0] __main___uart_tx_fifo_level0 = 5'd0;
reg           __main___uart_tx_fifo_replace = 1'd0;
reg     [3:0] __main___uart_tx_fifo_produce = 4'd0;
reg     [3:0] __main___uart_tx_fifo_consume = 4'd0;
reg     [3:0] __main___uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] __main___uart_tx_fifo_wrport_dat_r;
wire          __main___uart_tx_fifo_wrport_we;
wire    [9:0] __main___uart_tx_fifo_wrport_dat_w;
wire          __main___uart_tx_fifo_do_read;
wire    [3:0] __main___uart_tx_fifo_rdport_adr;
wire    [9:0] __main___uart_tx_fifo_rdport_dat_r;
wire          __main___uart_tx_fifo_rdport_re;
wire    [4:0] __main___uart_tx_fifo_level1;
wire    [7:0] __main___uart_tx_fifo_fifo_in_payload_data;
wire          __main___uart_tx_fifo_fifo_in_first;
wire          __main___uart_tx_fifo_fifo_in_last;
wire    [7:0] __main___uart_tx_fifo_fifo_out_payload_data;
wire          __main___uart_tx_fifo_fifo_out_first;
wire          __main___uart_tx_fifo_fifo_out_last;
wire          __main___uart_rx_fifo_sink_valid;
wire          __main___uart_rx_fifo_sink_ready;
wire          __main___uart_rx_fifo_sink_first;
wire          __main___uart_rx_fifo_sink_last;
wire    [7:0] __main___uart_rx_fifo_sink_payload_data;
wire          __main___uart_rx_fifo_source_valid;
wire          __main___uart_rx_fifo_source_ready;
wire          __main___uart_rx_fifo_source_first;
wire          __main___uart_rx_fifo_source_last;
wire    [7:0] __main___uart_rx_fifo_source_payload_data;
wire          __main___uart_rx_fifo_re;
reg           __main___uart_rx_fifo_readable = 1'd0;
wire          __main___uart_rx_fifo_syncfifo_we;
wire          __main___uart_rx_fifo_syncfifo_writable;
wire          __main___uart_rx_fifo_syncfifo_re;
wire          __main___uart_rx_fifo_syncfifo_readable;
wire    [9:0] __main___uart_rx_fifo_syncfifo_din;
wire    [9:0] __main___uart_rx_fifo_syncfifo_dout;
reg     [4:0] __main___uart_rx_fifo_level0 = 5'd0;
reg           __main___uart_rx_fifo_replace = 1'd0;
reg     [3:0] __main___uart_rx_fifo_produce = 4'd0;
reg     [3:0] __main___uart_rx_fifo_consume = 4'd0;
reg     [3:0] __main___uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] __main___uart_rx_fifo_wrport_dat_r;
wire          __main___uart_rx_fifo_wrport_we;
wire    [9:0] __main___uart_rx_fifo_wrport_dat_w;
wire          __main___uart_rx_fifo_do_read;
wire    [3:0] __main___uart_rx_fifo_rdport_adr;
wire    [9:0] __main___uart_rx_fifo_rdport_dat_r;
wire          __main___uart_rx_fifo_rdport_re;
wire    [4:0] __main___uart_rx_fifo_level1;
wire    [7:0] __main___uart_rx_fifo_fifo_in_payload_data;
wire          __main___uart_rx_fifo_fifo_in_first;
wire          __main___uart_rx_fifo_fifo_in_last;
wire    [7:0] __main___uart_rx_fifo_fifo_out_payload_data;
wire          __main___uart_rx_fifo_fifo_out_first;
wire          __main___uart_rx_fifo_fifo_out_last;
reg    [31:0] __main___timer_load_storage = 32'd0;
reg           __main___timer_load_re = 1'd0;
reg    [31:0] __main___timer_reload_storage = 32'd0;
reg           __main___timer_reload_re = 1'd0;
reg           __main___timer_en_storage = 1'd0;
reg           __main___timer_en_re = 1'd0;
reg           __main___timer_update_value_storage = 1'd0;
reg           __main___timer_update_value_re = 1'd0;
reg    [31:0] __main___timer_value_status = 32'd0;
wire          __main___timer_value_we;
reg           __main___timer_value_re = 1'd0;
wire          __main___timer_irq;
wire          __main___timer_zero_status;
reg           __main___timer_zero_pending = 1'd0;
wire          __main___timer_zero_trigger;
reg           __main___timer_zero_clear = 1'd0;
reg           __main___timer_zero_trigger_d = 1'd0;
wire          __main___timer_zero0;
wire          __main___timer_status_status;
wire          __main___timer_status_we;
reg           __main___timer_status_re = 1'd0;
wire          __main___timer_zero1;
wire          __main___timer_pending_status;
wire          __main___timer_pending_we;
reg           __main___timer_pending_re = 1'd0;
reg           __main___timer_pending_r = 1'd0;
wire          __main___timer_zero2;
reg           __main___timer_enable_storage = 1'd0;
reg           __main___timer_enable_re = 1'd0;
reg    [31:0] __main___timer_value = 32'd0;
wire          __main___sample_addr_status;
wire          __main___sample_addr_we;
reg           __main___sample_addr_re = 1'd0;
wire          __main___evt_hsbf_status;
wire          __main___evt_hsbf_we;
reg           __main___evt_hsbf_re = 1'd0;
wire          __main___evt_lsbf_status;
wire          __main___evt_lsbf_we;
reg           __main___evt_lsbf_re = 1'd0;
wire          __main___mem_rdwr_status;
wire          __main___mem_rdwr_we;
reg           __main___mem_rdwr_re = 1'd0;
reg           __main___sample_dat_i_storage = 1'd0;
reg           __main___sample_dat_i_re = 1'd0;
reg           __main___conf_res_storage = 1'd0;
reg           __main___conf_res_re = 1'd0;
reg           __main___conf_ratio_storage = 1'd0;
reg           __main___conf_ratio_re = 1'd0;
reg           __main___conf_swap_storage = 1'd0;
reg           __main___conf_swap_re = 1'd0;
reg           __main___conf_en_storage = 1'd0;
reg           __main___conf_en_re = 1'd0;
wire          __main___sample_dat_o_storage;
reg           __main___sample_dat_o_re = 1'd0;
wire          __main___irq;
wire          __main___ok_status;
reg           __main___ok_pending = 1'd0;
reg           __main___ok_trigger = 1'd0;
reg           __main___ok_clear = 1'd0;
reg           __main___ok_trigger_d = 1'd0;
wire          __main___ok0;
wire          __main___status_status;
wire          __main___status_we;
reg           __main___status_re = 1'd0;
wire          __main___ok1;
wire          __main___pending_status;
wire          __main___pending_we;
reg           __main___pending_re = 1'd0;
reg           __main___pending_r = 1'd0;
wire          __main___ok2;
reg           __main___enable_storage = 1'd0;
reg           __main___enable_re = 1'd0;
reg           __main___storage = 1'd0;
reg           __main___re = 1'd0;
reg    [13:0] builder_basesoc_adr = 14'd0;
reg           builder_basesoc_we = 1'd0;
reg    [31:0] builder_basesoc_dat_w = 32'd0;
wire   [31:0] builder_basesoc_dat_r;
wire   [29:0] builder_basesoc_wishbone_adr;
wire   [31:0] builder_basesoc_wishbone_dat_w;
reg    [31:0] builder_basesoc_wishbone_dat_r = 32'd0;
wire    [3:0] builder_basesoc_wishbone_sel;
wire          builder_basesoc_wishbone_cyc;
wire          builder_basesoc_wishbone_stb;
reg           builder_basesoc_wishbone_ack = 1'd0;
wire          builder_basesoc_wishbone_we;
wire    [2:0] builder_basesoc_wishbone_cti;
wire    [1:0] builder_basesoc_wishbone_bte;
reg           builder_basesoc_wishbone_err = 1'd0;
wire   [29:0] builder_shared_adr;
wire   [31:0] builder_shared_dat_w;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire    [3:0] builder_shared_sel;
wire          builder_shared_cyc;
wire          builder_shared_stb;
reg           builder_shared_ack = 1'd0;
wire          builder_shared_we;
wire    [2:0] builder_shared_cti;
wire    [1:0] builder_shared_bte;
wire          builder_shared_err;
wire    [1:0] builder_request;
reg           builder_grant = 1'd0;
reg     [3:0] builder_slave_sel = 4'd0;
reg     [3:0] builder_slave_sel_r = 4'd0;
reg           builder_error = 1'd0;
wire          builder_wait;
wire          builder_done;
reg    [19:0] builder_count = 20'd1000000;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
wire          builder_csr_bankarray_csrbank0_sel;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg           builder_csr_bankarray_csrbank1_sample_addr_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sample_addr_r;
reg           builder_csr_bankarray_csrbank1_sample_addr_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sample_addr_w;
reg           builder_csr_bankarray_csrbank1_evt_hsbf_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_evt_hsbf_r;
reg           builder_csr_bankarray_csrbank1_evt_hsbf_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_evt_hsbf_w;
reg           builder_csr_bankarray_csrbank1_evt_lsbf_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_evt_lsbf_r;
reg           builder_csr_bankarray_csrbank1_evt_lsbf_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_evt_lsbf_w;
reg           builder_csr_bankarray_csrbank1_mem_rdwr_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_mem_rdwr_r;
reg           builder_csr_bankarray_csrbank1_mem_rdwr_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_mem_rdwr_w;
reg           builder_csr_bankarray_csrbank1_sample_dat_i0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sample_dat_i0_r;
reg           builder_csr_bankarray_csrbank1_sample_dat_i0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sample_dat_i0_w;
reg           builder_csr_bankarray_csrbank1_conf_res0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_conf_res0_r;
reg           builder_csr_bankarray_csrbank1_conf_res0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_conf_res0_w;
reg           builder_csr_bankarray_csrbank1_conf_ratio0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_conf_ratio0_r;
reg           builder_csr_bankarray_csrbank1_conf_ratio0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_conf_ratio0_w;
reg           builder_csr_bankarray_csrbank1_conf_swap0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_conf_swap0_r;
reg           builder_csr_bankarray_csrbank1_conf_swap0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_conf_swap0_w;
reg           builder_csr_bankarray_csrbank1_conf_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_conf_en0_r;
reg           builder_csr_bankarray_csrbank1_conf_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_conf_en0_w;
reg           builder_csr_bankarray_csrbank1_sample_dat_o0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sample_dat_o0_r;
reg           builder_csr_bankarray_csrbank1_sample_dat_o0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sample_dat_o0_w;
reg           builder_csr_bankarray_csrbank1_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_status_r;
reg           builder_csr_bankarray_csrbank1_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_status_w;
reg           builder_csr_bankarray_csrbank1_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_pending_r;
reg           builder_csr_bankarray_csrbank1_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_pending_w;
reg           builder_csr_bankarray_csrbank1_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_enable0_r;
reg           builder_csr_bankarray_csrbank1_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_ev_enable0_w;
wire          builder_csr_bankarray_csrbank1_sel;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
wire          builder_csr_bankarray_sram_bus_we;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire    [5:0] builder_csr_bankarray_adr;
wire    [7:0] builder_csr_bankarray_dat_r;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg           builder_csr_bankarray_csrbank2_out0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_out0_r;
reg           builder_csr_bankarray_csrbank2_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_out0_w;
wire          builder_csr_bankarray_csrbank2_sel;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
reg           builder_csr_bankarray_csrbank3_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_load0_r;
reg           builder_csr_bankarray_csrbank3_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_load0_w;
reg           builder_csr_bankarray_csrbank3_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_reload0_r;
reg           builder_csr_bankarray_csrbank3_reload0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_reload0_w;
reg           builder_csr_bankarray_csrbank3_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_en0_r;
reg           builder_csr_bankarray_csrbank3_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_en0_w;
reg           builder_csr_bankarray_csrbank3_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_update_value0_r;
reg           builder_csr_bankarray_csrbank3_update_value0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_update_value0_w;
reg           builder_csr_bankarray_csrbank3_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_value_r;
reg           builder_csr_bankarray_csrbank3_value_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_value_w;
reg           builder_csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_status_r;
reg           builder_csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_status_w;
reg           builder_csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_pending_r;
reg           builder_csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_pending_w;
reg           builder_csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_enable0_r;
reg           builder_csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_enable0_w;
wire          builder_csr_bankarray_csrbank3_sel;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
reg           builder_csr_bankarray_csrbank4_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_txfull_r;
reg           builder_csr_bankarray_csrbank4_txfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_txfull_w;
reg           builder_csr_bankarray_csrbank4_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxempty_r;
reg           builder_csr_bankarray_csrbank4_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxempty_w;
reg           builder_csr_bankarray_csrbank4_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_status_r;
reg           builder_csr_bankarray_csrbank4_ev_status_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_status_w;
reg           builder_csr_bankarray_csrbank4_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_pending_r;
reg           builder_csr_bankarray_csrbank4_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_pending_w;
reg           builder_csr_bankarray_csrbank4_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_enable0_r;
reg           builder_csr_bankarray_csrbank4_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_enable0_w;
reg           builder_csr_bankarray_csrbank4_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_txempty_r;
reg           builder_csr_bankarray_csrbank4_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_txempty_w;
reg           builder_csr_bankarray_csrbank4_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxfull_r;
reg           builder_csr_bankarray_csrbank4_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxfull_w;
wire          builder_csr_bankarray_csrbank4_sel;
wire   [13:0] builder_csr_interconnect_adr;
wire          builder_csr_interconnect_we;
wire   [31:0] builder_csr_interconnect_dat_w;
wire   [31:0] builder_csr_interconnect_dat_r;
reg           builder_basesoc_rs232phytx_state = 1'd0;
reg           builder_basesoc_rs232phytx_next_state = 1'd0;
reg     [3:0] __main___tx_count_rs232phytx_next_value0 = 4'd0;
reg           __main___tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg           __main___serial_tx_rs232phytx_next_value1 = 1'd0;
reg           __main___serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg     [7:0] __main___tx_data_rs232phytx_next_value2 = 8'd0;
reg           __main___tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           builder_basesoc_rs232phyrx_state = 1'd0;
reg           builder_basesoc_rs232phyrx_next_state = 1'd0;
reg     [3:0] __main___rx_count_rs232phyrx_next_value0 = 4'd0;
reg           __main___rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] __main___rx_data_rs232phyrx_next_value1 = 8'd0;
reg           __main___rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           builder_basesoc_state = 1'd0;
reg           builder_basesoc_next_state = 1'd0;
wire          sys_clk;
wire          sys_rst;
wire          por_clk;
reg           builder_int_rst = 1'd1;
reg    [29:0] builder_array_muxed0 = 30'd0;
reg    [31:0] builder_array_muxed1 = 32'd0;
reg     [3:0] builder_array_muxed2 = 4'd0;
reg           builder_array_muxed3 = 1'd0;
reg           builder_array_muxed4 = 1'd0;
reg           builder_array_muxed5 = 1'd0;
reg     [2:0] builder_array_muxed6 = 3'd0;
reg     [1:0] builder_array_muxed7 = 2'd0;
reg           builder_regs0 = 1'd0;
reg           builder_regs1 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign __main___lm32_reset = (__main___soc_rst | __main___cpu_rst);
assign __main___bus_error = builder_error;
always @(*) begin
    __main___lm32_interrupt <= 32'd0;
    __main___lm32_interrupt[1] <= __main___timer_irq;
    __main___lm32_interrupt[0] <= __main___uart_irq;
end
assign builder_shared_adr = builder_array_muxed0;
assign builder_shared_dat_w = builder_array_muxed1;
assign builder_shared_sel = builder_array_muxed2;
assign builder_shared_cyc = builder_array_muxed3;
assign builder_shared_stb = builder_array_muxed4;
assign builder_shared_we = builder_array_muxed5;
assign builder_shared_cti = builder_array_muxed6;
assign builder_shared_bte = builder_array_muxed7;
assign __main___lm32_ibus_dat_r = builder_shared_dat_r;
assign __main___lm32_dbus_dat_r = builder_shared_dat_r;
assign __main___lm32_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign __main___lm32_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign __main___lm32_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign __main___lm32_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {__main___lm32_dbus_cyc, __main___lm32_ibus_cyc};
always @(*) begin
    builder_slave_sel <= 4'd0;
    builder_slave_sel[0] <= (builder_shared_adr[29:13] == 1'd0);
    builder_slave_sel[1] <= (builder_shared_adr[29:11] == 12'd2048);
    builder_slave_sel[2] <= (builder_shared_adr[29:12] == 17'd65536);
    builder_slave_sel[3] <= (builder_shared_adr[29:14] == 16'd33280);
end
assign __main___ram_bus_adr = builder_shared_adr;
assign __main___ram_bus_dat_w = builder_shared_dat_w;
assign __main___ram_bus_sel = builder_shared_sel;
assign __main___ram_bus_stb = builder_shared_stb;
assign __main___ram_bus_we = builder_shared_we;
assign __main___ram_bus_cti = builder_shared_cti;
assign __main___ram_bus_bte = builder_shared_bte;
assign __main___interface0_ram_bus_adr = builder_shared_adr;
assign __main___interface0_ram_bus_dat_w = builder_shared_dat_w;
assign __main___interface0_ram_bus_sel = builder_shared_sel;
assign __main___interface0_ram_bus_stb = builder_shared_stb;
assign __main___interface0_ram_bus_we = builder_shared_we;
assign __main___interface0_ram_bus_cti = builder_shared_cti;
assign __main___interface0_ram_bus_bte = builder_shared_bte;
assign __main___interface1_ram_bus_adr = builder_shared_adr;
assign __main___interface1_ram_bus_dat_w = builder_shared_dat_w;
assign __main___interface1_ram_bus_sel = builder_shared_sel;
assign __main___interface1_ram_bus_stb = builder_shared_stb;
assign __main___interface1_ram_bus_we = builder_shared_we;
assign __main___interface1_ram_bus_cti = builder_shared_cti;
assign __main___interface1_ram_bus_bte = builder_shared_bte;
assign builder_basesoc_wishbone_adr = builder_shared_adr;
assign builder_basesoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_basesoc_wishbone_sel = builder_shared_sel;
assign builder_basesoc_wishbone_stb = builder_shared_stb;
assign builder_basesoc_wishbone_we = builder_shared_we;
assign builder_basesoc_wishbone_cti = builder_shared_cti;
assign builder_basesoc_wishbone_bte = builder_shared_bte;
assign __main___ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign __main___interface0_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign __main___interface1_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_basesoc_wishbone_cyc = (builder_shared_cyc & builder_slave_sel[3]);
assign builder_shared_err = (((__main___ram_bus_err | __main___interface0_ram_bus_err) | __main___interface1_ram_bus_err) | builder_basesoc_wishbone_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_ack <= (((__main___ram_bus_ack | __main___interface0_ram_bus_ack) | __main___interface1_ram_bus_ack) | builder_basesoc_wishbone_ack);
    builder_shared_dat_r <= (((({32{builder_slave_sel_r[0]}} & __main___ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & __main___interface0_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & __main___interface1_ram_bus_dat_r)) | ({32{builder_slave_sel_r[3]}} & builder_basesoc_wishbone_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign __main___bus_errors_status = __main___bus_errors;
always @(*) begin
    __main___soc_rst <= 1'd0;
    if (__main___reset_re) begin
        __main___soc_rst <= __main___reset_storage[0];
    end
end
assign __main___cpu_rst = __main___reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = __main___reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = __main___scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = __main___bus_errors_status[31:0];
assign __main___bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign __main___adr = __main___ram_bus_adr[12:0];
assign __main___ram_bus_dat_r = __main___dat_r;
always @(*) begin
    __main___sram0_we <= 4'd0;
    __main___sram0_we[0] <= (((__main___interface0_ram_bus_cyc & __main___interface0_ram_bus_stb) & __main___interface0_ram_bus_we) & __main___interface0_ram_bus_sel[0]);
    __main___sram0_we[1] <= (((__main___interface0_ram_bus_cyc & __main___interface0_ram_bus_stb) & __main___interface0_ram_bus_we) & __main___interface0_ram_bus_sel[1]);
    __main___sram0_we[2] <= (((__main___interface0_ram_bus_cyc & __main___interface0_ram_bus_stb) & __main___interface0_ram_bus_we) & __main___interface0_ram_bus_sel[2]);
    __main___sram0_we[3] <= (((__main___interface0_ram_bus_cyc & __main___interface0_ram_bus_stb) & __main___interface0_ram_bus_we) & __main___interface0_ram_bus_sel[3]);
end
assign __main___sram0_adr = __main___interface0_ram_bus_adr[10:0];
assign __main___interface0_ram_bus_dat_r = __main___sram0_dat_r;
assign __main___sram0_dat_w = __main___interface0_ram_bus_dat_w;
always @(*) begin
    __main___sram1_we <= 4'd0;
    __main___sram1_we[0] <= (((__main___interface1_ram_bus_cyc & __main___interface1_ram_bus_stb) & __main___interface1_ram_bus_we) & __main___interface1_ram_bus_sel[0]);
    __main___sram1_we[1] <= (((__main___interface1_ram_bus_cyc & __main___interface1_ram_bus_stb) & __main___interface1_ram_bus_we) & __main___interface1_ram_bus_sel[1]);
    __main___sram1_we[2] <= (((__main___interface1_ram_bus_cyc & __main___interface1_ram_bus_stb) & __main___interface1_ram_bus_we) & __main___interface1_ram_bus_sel[2]);
    __main___sram1_we[3] <= (((__main___interface1_ram_bus_cyc & __main___interface1_ram_bus_stb) & __main___interface1_ram_bus_we) & __main___interface1_ram_bus_sel[3]);
end
assign __main___sram1_adr = __main___interface1_ram_bus_adr[11:0];
assign __main___interface1_ram_bus_dat_r = __main___sram1_dat_r;
assign __main___sram1_dat_w = __main___interface1_ram_bus_dat_w;
always @(*) begin
    builder_basesoc_rs232phytx_next_state <= 1'd0;
    __main___tx_count_rs232phytx_next_value0 <= 4'd0;
    __main___tx_sink_ready <= 1'd0;
    __main___tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    __main___serial_tx_rs232phytx_next_value1 <= 1'd0;
    __main___serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    __main___tx_enable <= 1'd0;
    __main___tx_data_rs232phytx_next_value2 <= 8'd0;
    __main___tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    builder_basesoc_rs232phytx_next_state <= builder_basesoc_rs232phytx_state;
    case (builder_basesoc_rs232phytx_state)
        1'd1: begin
            __main___tx_enable <= 1'd1;
            if (__main___tx_tick) begin
                __main___serial_tx_rs232phytx_next_value1 <= __main___tx_data;
                __main___serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                __main___tx_count_rs232phytx_next_value0 <= (__main___tx_count + 1'd1);
                __main___tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                __main___tx_data_rs232phytx_next_value2 <= {1'd1, __main___tx_data[7:1]};
                __main___tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((__main___tx_count == 4'd9)) begin
                    __main___tx_sink_ready <= 1'd1;
                    builder_basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            __main___tx_count_rs232phytx_next_value0 <= 1'd0;
            __main___tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            __main___serial_tx_rs232phytx_next_value1 <= 1'd1;
            __main___serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (__main___tx_sink_valid) begin
                __main___serial_tx_rs232phytx_next_value1 <= 1'd0;
                __main___serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                __main___tx_data_rs232phytx_next_value2 <= __main___tx_sink_payload_data;
                __main___tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    __main___rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    builder_basesoc_rs232phyrx_next_state <= 1'd0;
    __main___rx_source_valid <= 1'd0;
    __main___rx_count_rs232phyrx_next_value0 <= 4'd0;
    __main___rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    __main___rx_source_payload_data <= 8'd0;
    __main___rx_data_rs232phyrx_next_value1 <= 8'd0;
    __main___rx_enable <= 1'd0;
    builder_basesoc_rs232phyrx_next_state <= builder_basesoc_rs232phyrx_state;
    case (builder_basesoc_rs232phyrx_state)
        1'd1: begin
            __main___rx_enable <= 1'd1;
            if (__main___rx_tick) begin
                __main___rx_count_rs232phyrx_next_value0 <= (__main___rx_count + 1'd1);
                __main___rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                __main___rx_data_rs232phyrx_next_value1 <= {__main___rx_rx, __main___rx_data[7:1]};
                __main___rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((__main___rx_count == 4'd9)) begin
                    __main___rx_source_valid <= (__main___rx_rx == 1'd1);
                    __main___rx_source_payload_data <= __main___rx_data;
                    builder_basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            __main___rx_count_rs232phyrx_next_value0 <= 1'd0;
            __main___rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((__main___rx_rx == 1'd0) & (__main___rx_rx_d == 1'd1))) begin
                builder_basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign __main___uart_uart_sink_valid = __main___rx_source_valid;
assign __main___rx_source_ready = __main___uart_uart_sink_ready;
assign __main___uart_uart_sink_first = __main___rx_source_first;
assign __main___uart_uart_sink_last = __main___rx_source_last;
assign __main___uart_uart_sink_payload_data = __main___rx_source_payload_data;
assign __main___tx_sink_valid = __main___uart_uart_source_valid;
assign __main___uart_uart_source_ready = __main___tx_sink_ready;
assign __main___tx_sink_first = __main___uart_uart_source_first;
assign __main___tx_sink_last = __main___uart_uart_source_last;
assign __main___tx_sink_payload_data = __main___uart_uart_source_payload_data;
assign __main___uart_tx_fifo_sink_valid = __main___uart_rxtx_re;
assign __main___uart_tx_fifo_sink_payload_data = __main___uart_rxtx_r;
assign __main___uart_uart_source_valid = __main___uart_tx_fifo_source_valid;
assign __main___uart_tx_fifo_source_ready = __main___uart_uart_source_ready;
assign __main___uart_uart_source_first = __main___uart_tx_fifo_source_first;
assign __main___uart_uart_source_last = __main___uart_tx_fifo_source_last;
assign __main___uart_uart_source_payload_data = __main___uart_tx_fifo_source_payload_data;
assign __main___uart_txfull_status = (~__main___uart_tx_fifo_sink_ready);
assign __main___uart_txempty_status = (~__main___uart_tx_fifo_source_valid);
assign __main___uart_tx_trigger = __main___uart_tx_fifo_sink_ready;
assign __main___uart_rx_fifo_sink_valid = __main___uart_uart_sink_valid;
assign __main___uart_uart_sink_ready = __main___uart_rx_fifo_sink_ready;
assign __main___uart_rx_fifo_sink_first = __main___uart_uart_sink_first;
assign __main___uart_rx_fifo_sink_last = __main___uart_uart_sink_last;
assign __main___uart_rx_fifo_sink_payload_data = __main___uart_uart_sink_payload_data;
assign __main___uart_rxtx_w = __main___uart_rx_fifo_source_payload_data;
assign __main___uart_rx_fifo_source_ready = (__main___uart_rx_clear | (1'd0 & __main___uart_rxtx_we));
assign __main___uart_rxempty_status = (~__main___uart_rx_fifo_source_valid);
assign __main___uart_rxfull_status = (~__main___uart_rx_fifo_sink_ready);
assign __main___uart_rx_trigger = __main___uart_rx_fifo_source_valid;
assign __main___uart_tx0 = __main___uart_tx_status;
assign __main___uart_tx1 = __main___uart_tx_pending;
always @(*) begin
    __main___uart_tx_clear <= 1'd0;
    if ((__main___uart_pending_re & __main___uart_pending_r[0])) begin
        __main___uart_tx_clear <= 1'd1;
    end
end
assign __main___uart_rx0 = __main___uart_rx_status;
assign __main___uart_rx1 = __main___uart_rx_pending;
always @(*) begin
    __main___uart_rx_clear <= 1'd0;
    if ((__main___uart_pending_re & __main___uart_pending_r[1])) begin
        __main___uart_rx_clear <= 1'd1;
    end
end
assign __main___uart_irq = ((__main___uart_pending_status[0] & __main___uart_enable_storage[0]) | (__main___uart_pending_status[1] & __main___uart_enable_storage[1]));
assign __main___uart_tx_status = __main___uart_tx_trigger;
assign __main___uart_rx_status = __main___uart_rx_trigger;
assign __main___uart_tx_fifo_syncfifo_din = {__main___uart_tx_fifo_fifo_in_last, __main___uart_tx_fifo_fifo_in_first, __main___uart_tx_fifo_fifo_in_payload_data};
assign {__main___uart_tx_fifo_fifo_out_last, __main___uart_tx_fifo_fifo_out_first, __main___uart_tx_fifo_fifo_out_payload_data} = __main___uart_tx_fifo_syncfifo_dout;
assign __main___uart_tx_fifo_sink_ready = __main___uart_tx_fifo_syncfifo_writable;
assign __main___uart_tx_fifo_syncfifo_we = __main___uart_tx_fifo_sink_valid;
assign __main___uart_tx_fifo_fifo_in_first = __main___uart_tx_fifo_sink_first;
assign __main___uart_tx_fifo_fifo_in_last = __main___uart_tx_fifo_sink_last;
assign __main___uart_tx_fifo_fifo_in_payload_data = __main___uart_tx_fifo_sink_payload_data;
assign __main___uart_tx_fifo_source_valid = __main___uart_tx_fifo_readable;
assign __main___uart_tx_fifo_source_first = __main___uart_tx_fifo_fifo_out_first;
assign __main___uart_tx_fifo_source_last = __main___uart_tx_fifo_fifo_out_last;
assign __main___uart_tx_fifo_source_payload_data = __main___uart_tx_fifo_fifo_out_payload_data;
assign __main___uart_tx_fifo_re = __main___uart_tx_fifo_source_ready;
assign __main___uart_tx_fifo_syncfifo_re = (__main___uart_tx_fifo_syncfifo_readable & ((~__main___uart_tx_fifo_readable) | __main___uart_tx_fifo_re));
assign __main___uart_tx_fifo_level1 = (__main___uart_tx_fifo_level0 + __main___uart_tx_fifo_readable);
always @(*) begin
    __main___uart_tx_fifo_wrport_adr <= 4'd0;
    if (__main___uart_tx_fifo_replace) begin
        __main___uart_tx_fifo_wrport_adr <= (__main___uart_tx_fifo_produce - 1'd1);
    end else begin
        __main___uart_tx_fifo_wrport_adr <= __main___uart_tx_fifo_produce;
    end
end
assign __main___uart_tx_fifo_wrport_dat_w = __main___uart_tx_fifo_syncfifo_din;
assign __main___uart_tx_fifo_wrport_we = (__main___uart_tx_fifo_syncfifo_we & (__main___uart_tx_fifo_syncfifo_writable | __main___uart_tx_fifo_replace));
assign __main___uart_tx_fifo_do_read = (__main___uart_tx_fifo_syncfifo_readable & __main___uart_tx_fifo_syncfifo_re);
assign __main___uart_tx_fifo_rdport_adr = __main___uart_tx_fifo_consume;
assign __main___uart_tx_fifo_syncfifo_dout = __main___uart_tx_fifo_rdport_dat_r;
assign __main___uart_tx_fifo_rdport_re = __main___uart_tx_fifo_do_read;
assign __main___uart_tx_fifo_syncfifo_writable = (__main___uart_tx_fifo_level0 != 5'd16);
assign __main___uart_tx_fifo_syncfifo_readable = (__main___uart_tx_fifo_level0 != 1'd0);
assign __main___uart_rx_fifo_syncfifo_din = {__main___uart_rx_fifo_fifo_in_last, __main___uart_rx_fifo_fifo_in_first, __main___uart_rx_fifo_fifo_in_payload_data};
assign {__main___uart_rx_fifo_fifo_out_last, __main___uart_rx_fifo_fifo_out_first, __main___uart_rx_fifo_fifo_out_payload_data} = __main___uart_rx_fifo_syncfifo_dout;
assign __main___uart_rx_fifo_sink_ready = __main___uart_rx_fifo_syncfifo_writable;
assign __main___uart_rx_fifo_syncfifo_we = __main___uart_rx_fifo_sink_valid;
assign __main___uart_rx_fifo_fifo_in_first = __main___uart_rx_fifo_sink_first;
assign __main___uart_rx_fifo_fifo_in_last = __main___uart_rx_fifo_sink_last;
assign __main___uart_rx_fifo_fifo_in_payload_data = __main___uart_rx_fifo_sink_payload_data;
assign __main___uart_rx_fifo_source_valid = __main___uart_rx_fifo_readable;
assign __main___uart_rx_fifo_source_first = __main___uart_rx_fifo_fifo_out_first;
assign __main___uart_rx_fifo_source_last = __main___uart_rx_fifo_fifo_out_last;
assign __main___uart_rx_fifo_source_payload_data = __main___uart_rx_fifo_fifo_out_payload_data;
assign __main___uart_rx_fifo_re = __main___uart_rx_fifo_source_ready;
assign __main___uart_rx_fifo_syncfifo_re = (__main___uart_rx_fifo_syncfifo_readable & ((~__main___uart_rx_fifo_readable) | __main___uart_rx_fifo_re));
assign __main___uart_rx_fifo_level1 = (__main___uart_rx_fifo_level0 + __main___uart_rx_fifo_readable);
always @(*) begin
    __main___uart_rx_fifo_wrport_adr <= 4'd0;
    if (__main___uart_rx_fifo_replace) begin
        __main___uart_rx_fifo_wrport_adr <= (__main___uart_rx_fifo_produce - 1'd1);
    end else begin
        __main___uart_rx_fifo_wrport_adr <= __main___uart_rx_fifo_produce;
    end
end
assign __main___uart_rx_fifo_wrport_dat_w = __main___uart_rx_fifo_syncfifo_din;
assign __main___uart_rx_fifo_wrport_we = (__main___uart_rx_fifo_syncfifo_we & (__main___uart_rx_fifo_syncfifo_writable | __main___uart_rx_fifo_replace));
assign __main___uart_rx_fifo_do_read = (__main___uart_rx_fifo_syncfifo_readable & __main___uart_rx_fifo_syncfifo_re);
assign __main___uart_rx_fifo_rdport_adr = __main___uart_rx_fifo_consume;
assign __main___uart_rx_fifo_syncfifo_dout = __main___uart_rx_fifo_rdport_dat_r;
assign __main___uart_rx_fifo_rdport_re = __main___uart_rx_fifo_do_read;
assign __main___uart_rx_fifo_syncfifo_writable = (__main___uart_rx_fifo_level0 != 5'd16);
assign __main___uart_rx_fifo_syncfifo_readable = (__main___uart_rx_fifo_level0 != 1'd0);
assign __main___timer_zero_trigger = (__main___timer_value == 1'd0);
assign __main___timer_zero0 = __main___timer_zero_status;
assign __main___timer_zero1 = __main___timer_zero_pending;
always @(*) begin
    __main___timer_zero_clear <= 1'd0;
    if ((__main___timer_pending_re & __main___timer_pending_r)) begin
        __main___timer_zero_clear <= 1'd1;
    end
end
assign __main___timer_irq = (__main___timer_pending_status & __main___timer_enable_storage);
assign __main___timer_zero_status = __main___timer_zero_trigger;
assign __main___ok0 = __main___ok_status;
assign __main___ok1 = __main___ok_pending;
always @(*) begin
    __main___ok_clear <= 1'd0;
    if ((__main___pending_re & __main___pending_r)) begin
        __main___ok_clear <= 1'd1;
    end
end
assign __main___irq = (__main___pending_status & __main___enable_storage);
assign __main___ok_status = __main___ok_trigger;
assign {user_led_n0} = __main___storage;
always @(*) begin
    builder_basesoc_dat_w <= 32'd0;
    builder_basesoc_wishbone_ack <= 1'd0;
    builder_basesoc_wishbone_dat_r <= 32'd0;
    builder_basesoc_next_state <= 1'd0;
    builder_basesoc_adr <= 14'd0;
    builder_basesoc_we <= 1'd0;
    builder_basesoc_next_state <= builder_basesoc_state;
    case (builder_basesoc_state)
        1'd1: begin
            builder_basesoc_wishbone_ack <= 1'd1;
            builder_basesoc_wishbone_dat_r <= builder_basesoc_dat_r;
            builder_basesoc_next_state <= 1'd0;
        end
        default: begin
            builder_basesoc_dat_w <= builder_basesoc_wishbone_dat_w;
            if ((builder_basesoc_wishbone_cyc & builder_basesoc_wishbone_stb)) begin
                builder_basesoc_adr <= builder_basesoc_wishbone_adr;
                builder_basesoc_we <= (builder_basesoc_wishbone_we & (builder_basesoc_wishbone_sel != 1'd0));
                builder_basesoc_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank1_sample_addr_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sample_addr_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sample_addr_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_sample_addr_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sample_addr_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_evt_hsbf_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_evt_hsbf_re <= 1'd0;
    builder_csr_bankarray_csrbank1_evt_hsbf_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank1_evt_hsbf_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_evt_hsbf_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_evt_lsbf_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_evt_lsbf_we <= 1'd0;
    builder_csr_bankarray_csrbank1_evt_lsbf_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank1_evt_lsbf_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_evt_lsbf_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_mem_rdwr_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_mem_rdwr_we <= 1'd0;
    builder_csr_bankarray_csrbank1_mem_rdwr_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank1_mem_rdwr_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_mem_rdwr_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_sample_dat_i0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sample_dat_i0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sample_dat_i0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank1_sample_dat_i0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sample_dat_i0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_conf_res0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_conf_res0_we <= 1'd0;
    builder_csr_bankarray_csrbank1_conf_res0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank1_conf_res0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_conf_res0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_conf_ratio0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_conf_ratio0_we <= 1'd0;
    builder_csr_bankarray_csrbank1_conf_ratio0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank1_conf_ratio0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_conf_ratio0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_conf_swap0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_conf_swap0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_conf_swap0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank1_conf_swap0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_conf_swap0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_conf_en0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_conf_en0_we <= 1'd0;
    builder_csr_bankarray_csrbank1_conf_en0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd8))) begin
        builder_csr_bankarray_csrbank1_conf_en0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_conf_en0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_sample_dat_o0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sample_dat_o0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sample_dat_o0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csr_bankarray_csrbank1_sample_dat_o0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sample_dat_o0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_ev_status_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank1_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csr_bankarray_csrbank1_ev_status_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_ev_status_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_ev_pending_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_ev_pending_we <= 1'd0;
    builder_csr_bankarray_csrbank1_ev_pending_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csr_bankarray_csrbank1_ev_pending_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_ev_pending_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_ev_enable0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csr_bankarray_csrbank1_ev_enable0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_ev_enable0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_sample_addr_w = __main___sample_addr_status;
assign __main___sample_addr_we = builder_csr_bankarray_csrbank1_sample_addr_we;
assign builder_csr_bankarray_csrbank1_evt_hsbf_w = __main___evt_hsbf_status;
assign __main___evt_hsbf_we = builder_csr_bankarray_csrbank1_evt_hsbf_we;
assign builder_csr_bankarray_csrbank1_evt_lsbf_w = __main___evt_lsbf_status;
assign __main___evt_lsbf_we = builder_csr_bankarray_csrbank1_evt_lsbf_we;
assign builder_csr_bankarray_csrbank1_mem_rdwr_w = __main___mem_rdwr_status;
assign __main___mem_rdwr_we = builder_csr_bankarray_csrbank1_mem_rdwr_we;
assign builder_csr_bankarray_csrbank1_sample_dat_i0_w = __main___sample_dat_i_storage;
assign builder_csr_bankarray_csrbank1_conf_res0_w = __main___conf_res_storage;
assign builder_csr_bankarray_csrbank1_conf_ratio0_w = __main___conf_ratio_storage;
assign builder_csr_bankarray_csrbank1_conf_swap0_w = __main___conf_swap_storage;
assign builder_csr_bankarray_csrbank1_conf_en0_w = __main___conf_en_storage;
assign builder_csr_bankarray_csrbank1_sample_dat_o0_w = __main___sample_dat_o_storage;
assign __main___status_status = __main___ok0;
assign builder_csr_bankarray_csrbank1_ev_status_w = __main___status_status;
assign __main___status_we = builder_csr_bankarray_csrbank1_ev_status_we;
assign __main___pending_status = __main___ok1;
assign builder_csr_bankarray_csrbank1_ev_pending_w = __main___pending_status;
assign __main___pending_we = builder_csr_bankarray_csrbank1_ev_pending_we;
assign __main___ok2 = __main___enable_storage;
assign builder_csr_bankarray_csrbank1_ev_enable0_w = __main___enable_storage;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 2'd3);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 1'd1);
assign builder_csr_bankarray_csrbank2_out0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_out0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_out0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_out0_w = __main___storage;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign builder_csr_bankarray_csrbank3_load0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_load0_we <= 1'd0;
    builder_csr_bankarray_csrbank3_load0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank3_load0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_load0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_reload0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_reload0_we <= 1'd0;
    builder_csr_bankarray_csrbank3_reload0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank3_reload0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_reload0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_en0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank3_en0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_en0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_update_value0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_update_value0_we <= 1'd0;
    builder_csr_bankarray_csrbank3_update_value0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank3_update_value0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_update_value0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_value_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_value_re <= 1'd0;
    builder_csr_bankarray_csrbank3_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank3_value_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_value_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_ev_status_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank3_ev_status_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_status_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_ev_pending_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank3_ev_pending_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_pending_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_ev_enable0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank3_ev_enable0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_enable0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_load0_w = __main___timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank3_reload0_w = __main___timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank3_en0_w = __main___timer_en_storage;
assign builder_csr_bankarray_csrbank3_update_value0_w = __main___timer_update_value_storage;
assign builder_csr_bankarray_csrbank3_value_w = __main___timer_value_status[31:0];
assign __main___timer_value_we = builder_csr_bankarray_csrbank3_value_we;
assign __main___timer_status_status = __main___timer_zero0;
assign builder_csr_bankarray_csrbank3_ev_status_w = __main___timer_status_status;
assign __main___timer_status_we = builder_csr_bankarray_csrbank3_ev_status_we;
assign __main___timer_pending_status = __main___timer_zero1;
assign builder_csr_bankarray_csrbank3_ev_pending_w = __main___timer_pending_status;
assign __main___timer_pending_we = builder_csr_bankarray_csrbank3_ev_pending_we;
assign __main___timer_zero2 = __main___timer_enable_storage;
assign builder_csr_bankarray_csrbank3_ev_enable0_w = __main___timer_enable_storage;
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign __main___uart_rxtx_r = builder_csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    __main___uart_rxtx_re <= 1'd0;
    __main___uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        __main___uart_rxtx_re <= builder_csr_bankarray_interface4_bank_bus_we;
        __main___uart_rxtx_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_txfull_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank4_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank4_txfull_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_txfull_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_rxempty_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank4_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank4_rxempty_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_rxempty_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_ev_status_r = builder_csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_status_we <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_status_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank4_ev_status_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_status_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_ev_pending_r = builder_csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_pending_we <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_pending_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank4_ev_pending_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_pending_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_ev_enable0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank4_ev_enable0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_enable0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_txempty_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_txempty_we <= 1'd0;
    builder_csr_bankarray_csrbank4_txempty_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank4_txempty_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_txempty_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_rxfull_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_rxfull_we <= 1'd0;
    builder_csr_bankarray_csrbank4_rxfull_re <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank4_rxfull_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_rxfull_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_txfull_w = __main___uart_txfull_status;
assign __main___uart_txfull_we = builder_csr_bankarray_csrbank4_txfull_we;
assign builder_csr_bankarray_csrbank4_rxempty_w = __main___uart_rxempty_status;
assign __main___uart_rxempty_we = builder_csr_bankarray_csrbank4_rxempty_we;
always @(*) begin
    __main___uart_status_status <= 2'd0;
    __main___uart_status_status[0] <= __main___uart_tx0;
    __main___uart_status_status[1] <= __main___uart_rx0;
end
assign builder_csr_bankarray_csrbank4_ev_status_w = __main___uart_status_status[1:0];
assign __main___uart_status_we = builder_csr_bankarray_csrbank4_ev_status_we;
always @(*) begin
    __main___uart_pending_status <= 2'd0;
    __main___uart_pending_status[0] <= __main___uart_tx1;
    __main___uart_pending_status[1] <= __main___uart_rx1;
end
assign builder_csr_bankarray_csrbank4_ev_pending_w = __main___uart_pending_status[1:0];
assign __main___uart_pending_we = builder_csr_bankarray_csrbank4_ev_pending_we;
assign __main___uart_tx2 = __main___uart_enable_storage[0];
assign __main___uart_rx2 = __main___uart_enable_storage[1];
assign builder_csr_bankarray_csrbank4_ev_enable0_w = __main___uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank4_txempty_w = __main___uart_txempty_status;
assign __main___uart_txempty_we = builder_csr_bankarray_csrbank4_txempty_we;
assign builder_csr_bankarray_csrbank4_rxfull_w = __main___uart_rxfull_status;
assign __main___uart_rxfull_we = builder_csr_bankarray_csrbank4_rxfull_we;
assign builder_csr_interconnect_adr = builder_basesoc_adr;
assign builder_csr_interconnect_we = builder_basesoc_we;
assign builder_csr_interconnect_dat_w = builder_basesoc_dat_w;
assign builder_basesoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
assign sys_clk = clk25;
assign por_clk = clk25;
assign sys_rst = builder_int_rst;
always @(*) begin
    builder_array_muxed0 <= 30'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed0 <= __main___lm32_ibus_adr;
        end
        default: begin
            builder_array_muxed0 <= __main___lm32_dbus_adr;
        end
    endcase
end
always @(*) begin
    builder_array_muxed1 <= 32'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed1 <= __main___lm32_ibus_dat_w;
        end
        default: begin
            builder_array_muxed1 <= __main___lm32_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    builder_array_muxed2 <= 4'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed2 <= __main___lm32_ibus_sel;
        end
        default: begin
            builder_array_muxed2 <= __main___lm32_dbus_sel;
        end
    endcase
end
always @(*) begin
    builder_array_muxed3 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed3 <= __main___lm32_ibus_cyc;
        end
        default: begin
            builder_array_muxed3 <= __main___lm32_dbus_cyc;
        end
    endcase
end
always @(*) begin
    builder_array_muxed4 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed4 <= __main___lm32_ibus_stb;
        end
        default: begin
            builder_array_muxed4 <= __main___lm32_dbus_stb;
        end
    endcase
end
always @(*) begin
    builder_array_muxed5 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed5 <= __main___lm32_ibus_we;
        end
        default: begin
            builder_array_muxed5 <= __main___lm32_dbus_we;
        end
    endcase
end
always @(*) begin
    builder_array_muxed6 <= 3'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed6 <= __main___lm32_ibus_cti;
        end
        default: begin
            builder_array_muxed6 <= __main___lm32_dbus_cti;
        end
    endcase
end
always @(*) begin
    builder_array_muxed7 <= 2'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed7 <= __main___lm32_ibus_bte;
        end
        default: begin
            builder_array_muxed7 <= __main___lm32_dbus_bte;
        end
    endcase
end
assign __main___rx_rx = builder_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    builder_int_rst <= 1'd0;
end

always @(posedge sys_clk) begin
    case (builder_grant)
        1'd0: begin
            if ((~builder_request[0])) begin
                if (builder_request[1]) begin
                    builder_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~builder_request[1])) begin
                if (builder_request[0]) begin
                    builder_grant <= 1'd0;
                end
            end
        end
    endcase
    builder_slave_sel_r <= builder_slave_sel;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((__main___bus_errors != 32'd4294967295)) begin
        if (__main___bus_error) begin
            __main___bus_errors <= (__main___bus_errors + 1'd1);
        end
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        __main___reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    __main___reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        __main___scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    __main___scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    __main___bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    __main___ram_bus_ack <= 1'd0;
    if (((__main___ram_bus_cyc & __main___ram_bus_stb) & ((~__main___ram_bus_ack) | __main___adr_burst))) begin
        __main___ram_bus_ack <= 1'd1;
    end
    __main___interface0_ram_bus_ack <= 1'd0;
    if (((__main___interface0_ram_bus_cyc & __main___interface0_ram_bus_stb) & ((~__main___interface0_ram_bus_ack) | __main___sram0_adr_burst))) begin
        __main___interface0_ram_bus_ack <= 1'd1;
    end
    __main___interface1_ram_bus_ack <= 1'd0;
    if (((__main___interface1_ram_bus_cyc & __main___interface1_ram_bus_stb) & ((~__main___interface1_ram_bus_ack) | __main___sram1_adr_burst))) begin
        __main___interface1_ram_bus_ack <= 1'd1;
    end
    {__main___tx_tick, __main___tx_phase} <= 25'd19791209;
    if (__main___tx_enable) begin
        {__main___tx_tick, __main___tx_phase} <= (__main___tx_phase + 25'd19791209);
    end
    builder_basesoc_rs232phytx_state <= builder_basesoc_rs232phytx_next_state;
    if (__main___tx_count_rs232phytx_next_value_ce0) begin
        __main___tx_count <= __main___tx_count_rs232phytx_next_value0;
    end
    if (__main___serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= __main___serial_tx_rs232phytx_next_value1;
    end
    if (__main___tx_data_rs232phytx_next_value_ce2) begin
        __main___tx_data <= __main___tx_data_rs232phytx_next_value2;
    end
    __main___rx_rx_d <= __main___rx_rx;
    {__main___rx_tick, __main___rx_phase} <= 32'd2147483648;
    if (__main___rx_enable) begin
        {__main___rx_tick, __main___rx_phase} <= (__main___rx_phase + 25'd19791209);
    end
    builder_basesoc_rs232phyrx_state <= builder_basesoc_rs232phyrx_next_state;
    if (__main___rx_count_rs232phyrx_next_value_ce0) begin
        __main___rx_count <= __main___rx_count_rs232phyrx_next_value0;
    end
    if (__main___rx_data_rs232phyrx_next_value_ce1) begin
        __main___rx_data <= __main___rx_data_rs232phyrx_next_value1;
    end
    if (__main___uart_tx_clear) begin
        __main___uart_tx_pending <= 1'd0;
    end
    __main___uart_tx_trigger_d <= __main___uart_tx_trigger;
    if ((__main___uart_tx_trigger & (~__main___uart_tx_trigger_d))) begin
        __main___uart_tx_pending <= 1'd1;
    end
    if (__main___uart_rx_clear) begin
        __main___uart_rx_pending <= 1'd0;
    end
    __main___uart_rx_trigger_d <= __main___uart_rx_trigger;
    if ((__main___uart_rx_trigger & (~__main___uart_rx_trigger_d))) begin
        __main___uart_rx_pending <= 1'd1;
    end
    if (__main___uart_tx_fifo_syncfifo_re) begin
        __main___uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (__main___uart_tx_fifo_re) begin
            __main___uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((__main___uart_tx_fifo_syncfifo_we & __main___uart_tx_fifo_syncfifo_writable) & (~__main___uart_tx_fifo_replace))) begin
        __main___uart_tx_fifo_produce <= (__main___uart_tx_fifo_produce + 1'd1);
    end
    if (__main___uart_tx_fifo_do_read) begin
        __main___uart_tx_fifo_consume <= (__main___uart_tx_fifo_consume + 1'd1);
    end
    if (((__main___uart_tx_fifo_syncfifo_we & __main___uart_tx_fifo_syncfifo_writable) & (~__main___uart_tx_fifo_replace))) begin
        if ((~__main___uart_tx_fifo_do_read)) begin
            __main___uart_tx_fifo_level0 <= (__main___uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (__main___uart_tx_fifo_do_read) begin
            __main___uart_tx_fifo_level0 <= (__main___uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (__main___uart_rx_fifo_syncfifo_re) begin
        __main___uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (__main___uart_rx_fifo_re) begin
            __main___uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((__main___uart_rx_fifo_syncfifo_we & __main___uart_rx_fifo_syncfifo_writable) & (~__main___uart_rx_fifo_replace))) begin
        __main___uart_rx_fifo_produce <= (__main___uart_rx_fifo_produce + 1'd1);
    end
    if (__main___uart_rx_fifo_do_read) begin
        __main___uart_rx_fifo_consume <= (__main___uart_rx_fifo_consume + 1'd1);
    end
    if (((__main___uart_rx_fifo_syncfifo_we & __main___uart_rx_fifo_syncfifo_writable) & (~__main___uart_rx_fifo_replace))) begin
        if ((~__main___uart_rx_fifo_do_read)) begin
            __main___uart_rx_fifo_level0 <= (__main___uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (__main___uart_rx_fifo_do_read) begin
            __main___uart_rx_fifo_level0 <= (__main___uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (__main___timer_en_storage) begin
        if ((__main___timer_value == 1'd0)) begin
            __main___timer_value <= __main___timer_reload_storage;
        end else begin
            __main___timer_value <= (__main___timer_value - 1'd1);
        end
    end else begin
        __main___timer_value <= __main___timer_load_storage;
    end
    if (__main___timer_update_value_re) begin
        __main___timer_value_status <= __main___timer_value;
    end
    if (__main___timer_zero_clear) begin
        __main___timer_zero_pending <= 1'd0;
    end
    __main___timer_zero_trigger_d <= __main___timer_zero_trigger;
    if ((__main___timer_zero_trigger & (~__main___timer_zero_trigger_d))) begin
        __main___timer_zero_pending <= 1'd1;
    end
    if (__main___ok_clear) begin
        __main___ok_pending <= 1'd0;
    end
    __main___ok_trigger_d <= __main___ok_trigger;
    if (((~__main___ok_trigger) & __main___ok_trigger_d)) begin
        __main___ok_pending <= 1'd1;
    end
    builder_basesoc_state <= builder_basesoc_next_state;
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sample_addr_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_evt_hsbf_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_evt_lsbf_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_mem_rdwr_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sample_dat_i0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_conf_res0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_conf_ratio0_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_conf_swap0_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_conf_en0_w;
            end
            4'd9: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sample_dat_o0_w;
            end
            4'd10: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_status_w;
            end
            4'd11: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_pending_w;
            end
            4'd12: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_enable0_w;
            end
        endcase
    end
    __main___sample_addr_re <= builder_csr_bankarray_csrbank1_sample_addr_re;
    __main___evt_hsbf_re <= builder_csr_bankarray_csrbank1_evt_hsbf_re;
    __main___evt_lsbf_re <= builder_csr_bankarray_csrbank1_evt_lsbf_re;
    __main___mem_rdwr_re <= builder_csr_bankarray_csrbank1_mem_rdwr_re;
    if (builder_csr_bankarray_csrbank1_sample_dat_i0_re) begin
        __main___sample_dat_i_storage <= builder_csr_bankarray_csrbank1_sample_dat_i0_r;
    end
    __main___sample_dat_i_re <= builder_csr_bankarray_csrbank1_sample_dat_i0_re;
    if (builder_csr_bankarray_csrbank1_conf_res0_re) begin
        __main___conf_res_storage <= builder_csr_bankarray_csrbank1_conf_res0_r;
    end
    __main___conf_res_re <= builder_csr_bankarray_csrbank1_conf_res0_re;
    if (builder_csr_bankarray_csrbank1_conf_ratio0_re) begin
        __main___conf_ratio_storage <= builder_csr_bankarray_csrbank1_conf_ratio0_r;
    end
    __main___conf_ratio_re <= builder_csr_bankarray_csrbank1_conf_ratio0_re;
    if (builder_csr_bankarray_csrbank1_conf_swap0_re) begin
        __main___conf_swap_storage <= builder_csr_bankarray_csrbank1_conf_swap0_r;
    end
    __main___conf_swap_re <= builder_csr_bankarray_csrbank1_conf_swap0_re;
    if (builder_csr_bankarray_csrbank1_conf_en0_re) begin
        __main___conf_en_storage <= builder_csr_bankarray_csrbank1_conf_en0_r;
    end
    __main___conf_en_re <= builder_csr_bankarray_csrbank1_conf_en0_re;
    if (builder_csr_bankarray_csrbank1_sample_dat_o0_re) begin
        __main___sample_dat_o_storage <= builder_csr_bankarray_csrbank1_sample_dat_o0_r;
    end
    __main___sample_dat_o_re <= builder_csr_bankarray_csrbank1_sample_dat_o0_re;
    __main___status_re <= builder_csr_bankarray_csrbank1_ev_status_re;
    if (builder_csr_bankarray_csrbank1_ev_pending_re) begin
        __main___pending_r <= builder_csr_bankarray_csrbank1_ev_pending_r;
    end
    __main___pending_re <= builder_csr_bankarray_csrbank1_ev_pending_re;
    if (builder_csr_bankarray_csrbank1_ev_enable0_re) begin
        __main___enable_storage <= builder_csr_bankarray_csrbank1_ev_enable0_r;
    end
    __main___enable_re <= builder_csr_bankarray_csrbank1_ev_enable0_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank2_out0_re) begin
        __main___storage <= builder_csr_bankarray_csrbank2_out0_r;
    end
    __main___re <= builder_csr_bankarray_csrbank2_out0_re;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank3_load0_re) begin
        __main___timer_load_storage[31:0] <= builder_csr_bankarray_csrbank3_load0_r;
    end
    __main___timer_load_re <= builder_csr_bankarray_csrbank3_load0_re;
    if (builder_csr_bankarray_csrbank3_reload0_re) begin
        __main___timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank3_reload0_r;
    end
    __main___timer_reload_re <= builder_csr_bankarray_csrbank3_reload0_re;
    if (builder_csr_bankarray_csrbank3_en0_re) begin
        __main___timer_en_storage <= builder_csr_bankarray_csrbank3_en0_r;
    end
    __main___timer_en_re <= builder_csr_bankarray_csrbank3_en0_re;
    if (builder_csr_bankarray_csrbank3_update_value0_re) begin
        __main___timer_update_value_storage <= builder_csr_bankarray_csrbank3_update_value0_r;
    end
    __main___timer_update_value_re <= builder_csr_bankarray_csrbank3_update_value0_re;
    __main___timer_value_re <= builder_csr_bankarray_csrbank3_value_re;
    __main___timer_status_re <= builder_csr_bankarray_csrbank3_ev_status_re;
    if (builder_csr_bankarray_csrbank3_ev_pending_re) begin
        __main___timer_pending_r <= builder_csr_bankarray_csrbank3_ev_pending_r;
    end
    __main___timer_pending_re <= builder_csr_bankarray_csrbank3_ev_pending_re;
    if (builder_csr_bankarray_csrbank3_ev_enable0_re) begin
        __main___timer_enable_storage <= builder_csr_bankarray_csrbank3_ev_enable0_r;
    end
    __main___timer_enable_re <= builder_csr_bankarray_csrbank3_ev_enable0_re;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= __main___uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_rxfull_w;
            end
        endcase
    end
    __main___uart_txfull_re <= builder_csr_bankarray_csrbank4_txfull_re;
    __main___uart_rxempty_re <= builder_csr_bankarray_csrbank4_rxempty_re;
    __main___uart_status_re <= builder_csr_bankarray_csrbank4_ev_status_re;
    if (builder_csr_bankarray_csrbank4_ev_pending_re) begin
        __main___uart_pending_r[1:0] <= builder_csr_bankarray_csrbank4_ev_pending_r;
    end
    __main___uart_pending_re <= builder_csr_bankarray_csrbank4_ev_pending_re;
    if (builder_csr_bankarray_csrbank4_ev_enable0_re) begin
        __main___uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank4_ev_enable0_r;
    end
    __main___uart_enable_re <= builder_csr_bankarray_csrbank4_ev_enable0_re;
    __main___uart_txempty_re <= builder_csr_bankarray_csrbank4_txempty_re;
    __main___uart_rxfull_re <= builder_csr_bankarray_csrbank4_rxfull_re;
    if (sys_rst) begin
        __main___reset_storage <= 2'd0;
        __main___reset_re <= 1'd0;
        __main___scratch_storage <= 32'd305419896;
        __main___scratch_re <= 1'd0;
        __main___bus_errors_re <= 1'd0;
        __main___bus_errors <= 32'd0;
        __main___ram_bus_ack <= 1'd0;
        __main___interface0_ram_bus_ack <= 1'd0;
        __main___interface1_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        __main___tx_tick <= 1'd0;
        __main___rx_tick <= 1'd0;
        __main___rx_rx_d <= 1'd0;
        __main___uart_txfull_re <= 1'd0;
        __main___uart_rxempty_re <= 1'd0;
        __main___uart_tx_pending <= 1'd0;
        __main___uart_tx_trigger_d <= 1'd0;
        __main___uart_rx_pending <= 1'd0;
        __main___uart_rx_trigger_d <= 1'd0;
        __main___uart_status_re <= 1'd0;
        __main___uart_pending_re <= 1'd0;
        __main___uart_pending_r <= 2'd0;
        __main___uart_enable_storage <= 2'd0;
        __main___uart_enable_re <= 1'd0;
        __main___uart_txempty_re <= 1'd0;
        __main___uart_rxfull_re <= 1'd0;
        __main___uart_tx_fifo_readable <= 1'd0;
        __main___uart_tx_fifo_level0 <= 5'd0;
        __main___uart_tx_fifo_produce <= 4'd0;
        __main___uart_tx_fifo_consume <= 4'd0;
        __main___uart_rx_fifo_readable <= 1'd0;
        __main___uart_rx_fifo_level0 <= 5'd0;
        __main___uart_rx_fifo_produce <= 4'd0;
        __main___uart_rx_fifo_consume <= 4'd0;
        __main___timer_load_storage <= 32'd0;
        __main___timer_load_re <= 1'd0;
        __main___timer_reload_storage <= 32'd0;
        __main___timer_reload_re <= 1'd0;
        __main___timer_en_storage <= 1'd0;
        __main___timer_en_re <= 1'd0;
        __main___timer_update_value_storage <= 1'd0;
        __main___timer_update_value_re <= 1'd0;
        __main___timer_value_status <= 32'd0;
        __main___timer_value_re <= 1'd0;
        __main___timer_zero_pending <= 1'd0;
        __main___timer_zero_trigger_d <= 1'd0;
        __main___timer_status_re <= 1'd0;
        __main___timer_pending_re <= 1'd0;
        __main___timer_pending_r <= 1'd0;
        __main___timer_enable_storage <= 1'd0;
        __main___timer_enable_re <= 1'd0;
        __main___timer_value <= 32'd0;
        __main___sample_addr_re <= 1'd0;
        __main___evt_hsbf_re <= 1'd0;
        __main___evt_lsbf_re <= 1'd0;
        __main___mem_rdwr_re <= 1'd0;
        __main___sample_dat_i_storage <= 1'd0;
        __main___sample_dat_i_re <= 1'd0;
        __main___conf_res_storage <= 1'd0;
        __main___conf_res_re <= 1'd0;
        __main___conf_ratio_storage <= 1'd0;
        __main___conf_ratio_re <= 1'd0;
        __main___conf_swap_storage <= 1'd0;
        __main___conf_swap_re <= 1'd0;
        __main___conf_en_storage <= 1'd0;
        __main___conf_en_re <= 1'd0;
        __main___sample_dat_o_storage <= 1'd0;
        __main___sample_dat_o_re <= 1'd0;
        __main___ok_pending <= 1'd0;
        __main___ok_trigger_d <= 1'd0;
        __main___status_re <= 1'd0;
        __main___pending_re <= 1'd0;
        __main___pending_r <= 1'd0;
        __main___enable_storage <= 1'd0;
        __main___enable_re <= 1'd0;
        __main___storage <= 1'd0;
        __main___re <= 1'd0;
        builder_grant <= 1'd0;
        builder_slave_sel_r <= 4'd0;
        builder_count <= 20'd1000000;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_basesoc_rs232phytx_state <= 1'd0;
        builder_basesoc_rs232phyrx_state <= 1'd0;
        builder_basesoc_state <= 1'd0;
    end
    builder_regs0 <= serial_rx;
    builder_regs1 <= builder_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 5984-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:5983];
initial begin
	$readmemh("board_75e_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[__main___adr];
end
assign __main___dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("board_75e_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (__main___sram0_we[0])
		sram[__main___sram0_adr][7:0] <= __main___sram0_dat_w[7:0];
	if (__main___sram0_we[1])
		sram[__main___sram0_adr][15:8] <= __main___sram0_dat_w[15:8];
	if (__main___sram0_we[2])
		sram[__main___sram0_adr][23:16] <= __main___sram0_dat_w[23:16];
	if (__main___sram0_we[3])
		sram[__main___sram0_adr][31:24] <= __main___sram0_dat_w[31:24];
	sram_adr0 <= __main___sram0_adr;
end
assign __main___sram0_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory main_ram: 4096-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] main_ram[0:4095];
initial begin
	$readmemh("board_75e_main_ram.init", main_ram);
end
reg [11:0] main_ram_adr0;
always @(posedge sys_clk) begin
	if (__main___sram1_we[0])
		main_ram[__main___sram1_adr][7:0] <= __main___sram1_dat_w[7:0];
	if (__main___sram1_we[1])
		main_ram[__main___sram1_adr][15:8] <= __main___sram1_dat_w[15:8];
	if (__main___sram1_we[2])
		main_ram[__main___sram1_adr][23:16] <= __main___sram1_dat_w[23:16];
	if (__main___sram1_we[3])
		main_ram[__main___sram1_adr][31:24] <= __main___sram1_dat_w[31:24];
	main_ram_adr0 <= __main___sram1_adr;
end
assign __main___sram1_dat_r = main_ram[main_ram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 40-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:39];
initial begin
	$readmemh("board_75e_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (__main___uart_tx_fifo_wrport_we)
		storage[__main___uart_tx_fifo_wrport_adr] <= __main___uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[__main___uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (__main___uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[__main___uart_tx_fifo_rdport_adr];
end
assign __main___uart_tx_fifo_wrport_dat_r = storage_dat0;
assign __main___uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (__main___uart_rx_fifo_wrport_we)
		storage_1[__main___uart_rx_fifo_wrport_adr] <= __main___uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[__main___uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (__main___uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[__main___uart_rx_fifo_rdport_adr];
end
assign __main___uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign __main___uart_rx_fifo_rdport_dat_r = storage_1_dat1;


i2s_codec i2s_codec(
	.conf_en(__main___conf_en_storage),
	.conf_ratio(__main___conf_ratio_storage),
	.conf_res(__main___conf_res_storage),
	.conf_swap(__main___conf_swap_storage),
	.i2s_sd_i(i2s_pins0_i2s_sd_i),
	.sample_dat_i(__main___sample_dat_i_storage),
	.wb_clk(sys_clk),
	.evt_hsbf(__main___evt_hsbf_status),
	.evt_lsbf(__main___evt_lsbf_status),
	.i2s_sck(i2s_pins0_i2s_sck_o),
	.i2s_sd(i2s_pins0_i2s_sd_o),
	.i2s_ws(i2s_pins0_i2s_ws_o),
	.mem_rdwr(__main___mem_rdwr_status),
	.sample_addr(__main___sample_addr_status),
	.sample_dat_o(__main___sample_dat_o_storage)
);

lm32_cpu #(
	.eba_reset(32'h00000000)
) lm32_cpu (
	.D_ACK_I(__main___lm32_dbus_ack),
	.D_DAT_I(__main___lm32_dbus_dat_r),
	.D_ERR_I(__main___lm32_dbus_err),
	.D_RTY_I(1'd0),
	.I_ACK_I(__main___lm32_ibus_ack),
	.I_DAT_I(__main___lm32_ibus_dat_r),
	.I_ERR_I(__main___lm32_ibus_err),
	.I_RTY_I(1'd0),
	.clk_i(sys_clk),
	.interrupt(__main___lm32_interrupt),
	.rst_i((sys_rst | __main___lm32_reset)),
	.D_ADR_O({__main___lm32_dbus_adr, __main___lm321}),
	.D_BTE_O(__main___lm32_dbus_bte),
	.D_CTI_O(__main___lm32_dbus_cti),
	.D_CYC_O(__main___lm32_dbus_cyc),
	.D_DAT_O(__main___lm32_dbus_dat_w),
	.D_SEL_O(__main___lm32_dbus_sel),
	.D_STB_O(__main___lm32_dbus_stb),
	.D_WE_O(__main___lm32_dbus_we),
	.I_ADR_O({__main___lm32_ibus_adr, __main___lm320}),
	.I_BTE_O(__main___lm32_ibus_bte),
	.I_CTI_O(__main___lm32_ibus_cti),
	.I_CYC_O(__main___lm32_ibus_cyc),
	.I_DAT_O(__main___lm32_ibus_dat_w),
	.I_SEL_O(__main___lm32_ibus_sel),
	.I_STB_O(__main___lm32_ibus_stb),
	.I_WE_O(__main___lm32_ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-05-31 09:59:26.
//------------------------------------------------------------------------------
