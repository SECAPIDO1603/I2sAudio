// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : cain_test.v
// Device     : LFE5U-25F-6BG256C
// LiteX sha1 : 34ec22f8
// Date       : 2023-06-26 18:53:12
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module cain_test (
    output reg           serial_tx,
    input  wire          serial_rx,
    input  wire          clk25,
    input  wire          user_btn_n,
    output wire          user_led0,
    input  wire          i2s_pins1_i2s_sd_i,
    output wire          i2s_pins1_i2s_sd,
    output wire          i2s_pins1_i2s_sck,
    output wire          i2s_pins1_i2s_ws
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg           soc_rst = 1'd0;
wire          cpu_rst;
reg     [1:0] reset_storage = 2'd0;
reg           reset_re = 1'd0;
reg    [31:0] scratch_storage = 32'd305419896;
reg           scratch_re = 1'd0;
wire   [31:0] bus_errors_status;
wire          bus_errors_we;
reg           bus_errors_re = 1'd0;
wire          bus_error;
reg    [31:0] bus_errors = 32'd0;
wire          lm32_reset;
wire   [29:0] lm32_ibus_adr;
wire   [31:0] lm32_ibus_dat_w;
wire   [31:0] lm32_ibus_dat_r;
wire    [3:0] lm32_ibus_sel;
wire          lm32_ibus_cyc;
wire          lm32_ibus_stb;
wire          lm32_ibus_ack;
wire          lm32_ibus_we;
wire    [2:0] lm32_ibus_cti;
wire    [1:0] lm32_ibus_bte;
wire          lm32_ibus_err;
wire   [29:0] lm32_dbus_adr;
wire   [31:0] lm32_dbus_dat_w;
wire   [31:0] lm32_dbus_dat_r;
wire    [3:0] lm32_dbus_sel;
wire          lm32_dbus_cyc;
wire          lm32_dbus_stb;
wire          lm32_dbus_ack;
wire          lm32_dbus_we;
wire    [2:0] lm32_dbus_cti;
wire    [1:0] lm32_dbus_bte;
wire          lm32_dbus_err;
reg    [31:0] lm32_interrupt = 32'd0;
wire    [1:0] lm320;
wire    [1:0] lm321;
wire   [29:0] ram_bus_adr;
wire   [31:0] ram_bus_dat_w;
wire   [31:0] ram_bus_dat_r;
wire    [3:0] ram_bus_sel;
wire          ram_bus_cyc;
wire          ram_bus_stb;
reg           ram_bus_ack = 1'd0;
wire          ram_bus_we;
wire    [2:0] ram_bus_cti;
wire    [1:0] ram_bus_bte;
reg           ram_bus_err = 1'd0;
reg           adr_burst = 1'd0;
wire   [12:0] adr;
wire   [31:0] dat_r;
wire   [29:0] interface0_ram_bus_adr;
wire   [31:0] interface0_ram_bus_dat_w;
wire   [31:0] interface0_ram_bus_dat_r;
wire    [3:0] interface0_ram_bus_sel;
wire          interface0_ram_bus_cyc;
wire          interface0_ram_bus_stb;
reg           interface0_ram_bus_ack = 1'd0;
wire          interface0_ram_bus_we;
wire    [2:0] interface0_ram_bus_cti;
wire    [1:0] interface0_ram_bus_bte;
reg           interface0_ram_bus_err = 1'd0;
reg           sram0_adr_burst = 1'd0;
wire   [10:0] sram0_adr;
wire   [31:0] sram0_dat_r;
reg     [3:0] sram0_we = 4'd0;
wire   [31:0] sram0_dat_w;
wire   [29:0] interface1_ram_bus_adr;
wire   [31:0] interface1_ram_bus_dat_w;
wire   [31:0] interface1_ram_bus_dat_r;
wire    [3:0] interface1_ram_bus_sel;
wire          interface1_ram_bus_cyc;
wire          interface1_ram_bus_stb;
reg           interface1_ram_bus_ack = 1'd0;
wire          interface1_ram_bus_we;
wire    [2:0] interface1_ram_bus_cti;
wire    [1:0] interface1_ram_bus_bte;
reg           interface1_ram_bus_err = 1'd0;
reg           sram1_adr_burst = 1'd0;
wire   [11:0] sram1_adr;
wire   [31:0] sram1_dat_r;
reg     [3:0] sram1_we = 4'd0;
wire   [31:0] sram1_dat_w;
wire          tx_sink_valid;
reg           tx_sink_ready = 1'd0;
wire          tx_sink_first;
wire          tx_sink_last;
wire    [7:0] tx_sink_payload_data;
reg     [7:0] tx_data = 8'd0;
reg     [3:0] tx_count = 4'd0;
reg           tx_enable = 1'd0;
reg           tx_tick = 1'd0;
reg    [31:0] tx_phase = 32'd0;
reg           rx_source_valid = 1'd0;
wire          rx_source_ready;
reg           rx_source_first = 1'd0;
reg           rx_source_last = 1'd0;
reg     [7:0] rx_source_payload_data = 8'd0;
reg     [7:0] rx_data = 8'd0;
reg     [3:0] rx_count = 4'd0;
reg           rx_enable = 1'd0;
reg           rx_tick = 1'd0;
reg    [31:0] rx_phase = 32'd0;
wire          rx_rx;
reg           rx_rx_d = 1'd0;
reg           uart_rxtx_re = 1'd0;
wire    [7:0] uart_rxtx_r;
reg           uart_rxtx_we = 1'd0;
wire    [7:0] uart_rxtx_w;
wire          uart_txfull_status;
wire          uart_txfull_we;
reg           uart_txfull_re = 1'd0;
wire          uart_rxempty_status;
wire          uart_rxempty_we;
reg           uart_rxempty_re = 1'd0;
wire          uart_irq;
wire          uart_tx_status;
reg           uart_tx_pending = 1'd0;
wire          uart_tx_trigger;
reg           uart_tx_clear = 1'd0;
reg           uart_tx_trigger_d = 1'd0;
wire          uart_rx_status;
reg           uart_rx_pending = 1'd0;
wire          uart_rx_trigger;
reg           uart_rx_clear = 1'd0;
reg           uart_rx_trigger_d = 1'd0;
wire          uart_tx0;
wire          uart_rx0;
reg     [1:0] uart_status_status = 2'd0;
wire          uart_status_we;
reg           uart_status_re = 1'd0;
wire          uart_tx1;
wire          uart_rx1;
reg     [1:0] uart_pending_status = 2'd0;
wire          uart_pending_we;
reg           uart_pending_re = 1'd0;
reg     [1:0] uart_pending_r = 2'd0;
wire          uart_tx2;
wire          uart_rx2;
reg     [1:0] uart_enable_storage = 2'd0;
reg           uart_enable_re = 1'd0;
wire          uart_txempty_status;
wire          uart_txempty_we;
reg           uart_txempty_re = 1'd0;
wire          uart_rxfull_status;
wire          uart_rxfull_we;
reg           uart_rxfull_re = 1'd0;
wire          uart_uart_sink_valid;
wire          uart_uart_sink_ready;
wire          uart_uart_sink_first;
wire          uart_uart_sink_last;
wire    [7:0] uart_uart_sink_payload_data;
wire          uart_uart_source_valid;
wire          uart_uart_source_ready;
wire          uart_uart_source_first;
wire          uart_uart_source_last;
wire    [7:0] uart_uart_source_payload_data;
wire          uart_tx_fifo_sink_valid;
wire          uart_tx_fifo_sink_ready;
reg           uart_tx_fifo_sink_first = 1'd0;
reg           uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] uart_tx_fifo_sink_payload_data;
wire          uart_tx_fifo_source_valid;
wire          uart_tx_fifo_source_ready;
wire          uart_tx_fifo_source_first;
wire          uart_tx_fifo_source_last;
wire    [7:0] uart_tx_fifo_source_payload_data;
wire          uart_tx_fifo_re;
reg           uart_tx_fifo_readable = 1'd0;
wire          uart_tx_fifo_syncfifo_we;
wire          uart_tx_fifo_syncfifo_writable;
wire          uart_tx_fifo_syncfifo_re;
wire          uart_tx_fifo_syncfifo_readable;
wire    [9:0] uart_tx_fifo_syncfifo_din;
wire    [9:0] uart_tx_fifo_syncfifo_dout;
reg     [4:0] uart_tx_fifo_level0 = 5'd0;
reg           uart_tx_fifo_replace = 1'd0;
reg     [3:0] uart_tx_fifo_produce = 4'd0;
reg     [3:0] uart_tx_fifo_consume = 4'd0;
reg     [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_tx_fifo_wrport_dat_r;
wire          uart_tx_fifo_wrport_we;
wire    [9:0] uart_tx_fifo_wrport_dat_w;
wire          uart_tx_fifo_do_read;
wire    [3:0] uart_tx_fifo_rdport_adr;
wire    [9:0] uart_tx_fifo_rdport_dat_r;
wire          uart_tx_fifo_rdport_re;
wire    [4:0] uart_tx_fifo_level1;
wire    [7:0] uart_tx_fifo_fifo_in_payload_data;
wire          uart_tx_fifo_fifo_in_first;
wire          uart_tx_fifo_fifo_in_last;
wire    [7:0] uart_tx_fifo_fifo_out_payload_data;
wire          uart_tx_fifo_fifo_out_first;
wire          uart_tx_fifo_fifo_out_last;
wire          uart_rx_fifo_sink_valid;
wire          uart_rx_fifo_sink_ready;
wire          uart_rx_fifo_sink_first;
wire          uart_rx_fifo_sink_last;
wire    [7:0] uart_rx_fifo_sink_payload_data;
wire          uart_rx_fifo_source_valid;
wire          uart_rx_fifo_source_ready;
wire          uart_rx_fifo_source_first;
wire          uart_rx_fifo_source_last;
wire    [7:0] uart_rx_fifo_source_payload_data;
wire          uart_rx_fifo_re;
reg           uart_rx_fifo_readable = 1'd0;
wire          uart_rx_fifo_syncfifo_we;
wire          uart_rx_fifo_syncfifo_writable;
wire          uart_rx_fifo_syncfifo_re;
wire          uart_rx_fifo_syncfifo_readable;
wire    [9:0] uart_rx_fifo_syncfifo_din;
wire    [9:0] uart_rx_fifo_syncfifo_dout;
reg     [4:0] uart_rx_fifo_level0 = 5'd0;
reg           uart_rx_fifo_replace = 1'd0;
reg     [3:0] uart_rx_fifo_produce = 4'd0;
reg     [3:0] uart_rx_fifo_consume = 4'd0;
reg     [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_rx_fifo_wrport_dat_r;
wire          uart_rx_fifo_wrport_we;
wire    [9:0] uart_rx_fifo_wrport_dat_w;
wire          uart_rx_fifo_do_read;
wire    [3:0] uart_rx_fifo_rdport_adr;
wire    [9:0] uart_rx_fifo_rdport_dat_r;
wire          uart_rx_fifo_rdport_re;
wire    [4:0] uart_rx_fifo_level1;
wire    [7:0] uart_rx_fifo_fifo_in_payload_data;
wire          uart_rx_fifo_fifo_in_first;
wire          uart_rx_fifo_fifo_in_last;
wire    [7:0] uart_rx_fifo_fifo_out_payload_data;
wire          uart_rx_fifo_fifo_out_first;
wire          uart_rx_fifo_fifo_out_last;
reg    [31:0] timer_load_storage = 32'd0;
reg           timer_load_re = 1'd0;
reg    [31:0] timer_reload_storage = 32'd0;
reg           timer_reload_re = 1'd0;
reg           timer_en_storage = 1'd0;
reg           timer_en_re = 1'd0;
reg           timer_update_value_storage = 1'd0;
reg           timer_update_value_re = 1'd0;
reg    [31:0] timer_value_status = 32'd0;
wire          timer_value_we;
reg           timer_value_re = 1'd0;
wire          timer_irq;
wire          timer_zero_status;
reg           timer_zero_pending = 1'd0;
wire          timer_zero_trigger;
reg           timer_zero_clear = 1'd0;
reg           timer_zero_trigger_d = 1'd0;
wire          timer_zero0;
wire          timer_status_status;
wire          timer_status_we;
reg           timer_status_re = 1'd0;
wire          timer_zero1;
wire          timer_pending_status;
wire          timer_pending_we;
reg           timer_pending_re = 1'd0;
reg           timer_pending_r = 1'd0;
wire          timer_zero2;
reg           timer_enable_storage = 1'd0;
reg           timer_enable_re = 1'd0;
reg    [31:0] timer_value = 32'd0;
wire          sys_clk;
wire          sys_rst;
wire          por_clk;
reg           int_rst = 1'd1;
reg           storage = 1'd0;
reg           re = 1'd0;
wire          evt_hsbf_status;
wire          evt_hsbf_we;
reg           evt_hsbf_re = 1'd0;
wire          evt_lsbf_status;
wire          evt_lsbf_we;
reg           evt_lsbf_re = 1'd0;
wire   [15:0] sample_dat_o_status;
wire          sample_dat_o_we;
reg           sample_dat_o_re = 1'd0;
wire   [13:0] address_r_status;
wire          address_r_we;
reg           address_r_re = 1'd0;
reg           wr_en_storage = 1'd0;
reg           wr_en_re = 1'd0;
reg    [13:0] wr_addr_storage = 14'd0;
reg           wr_addr_re = 1'd0;
reg    [15:0] data_in_storage = 16'd0;
reg           data_in_re = 1'd0;
reg     [5:0] conf_res_storage = 6'd0;
reg           conf_res_re = 1'd0;
reg    [23:0] conf_ratio_storage = 24'd0;
reg           conf_ratio_re = 1'd0;
reg           conf_swap_storage = 1'd0;
reg           conf_swap_re = 1'd0;
reg           conf_en_storage = 1'd0;
reg           conf_en_re = 1'd0;
wire          irq;
wire          ok_status;
reg           ok_pending = 1'd0;
reg           ok_trigger = 1'd0;
reg           ok_clear = 1'd0;
reg           ok_trigger_d = 1'd0;
wire          ok0;
wire          status_status;
wire          status_we;
reg           status_re = 1'd0;
wire          ok1;
wire          pending_status;
wire          pending_we;
reg           pending_re = 1'd0;
reg           pending_r = 1'd0;
wire          ok2;
reg           enable_storage = 1'd0;
reg           enable_re = 1'd0;
reg    [13:0] basesoc_adr = 14'd0;
reg           basesoc_we = 1'd0;
reg    [31:0] basesoc_dat_w = 32'd0;
wire   [31:0] basesoc_dat_r;
wire   [29:0] basesoc_wishbone_adr;
wire   [31:0] basesoc_wishbone_dat_w;
reg    [31:0] basesoc_wishbone_dat_r = 32'd0;
wire    [3:0] basesoc_wishbone_sel;
wire          basesoc_wishbone_cyc;
wire          basesoc_wishbone_stb;
reg           basesoc_wishbone_ack = 1'd0;
wire          basesoc_wishbone_we;
wire    [2:0] basesoc_wishbone_cti;
wire    [1:0] basesoc_wishbone_bte;
reg           basesoc_wishbone_err = 1'd0;
wire   [29:0] shared_adr;
wire   [31:0] shared_dat_w;
reg    [31:0] shared_dat_r = 32'd0;
wire    [3:0] shared_sel;
wire          shared_cyc;
wire          shared_stb;
reg           shared_ack = 1'd0;
wire          shared_we;
wire    [2:0] shared_cti;
wire    [1:0] shared_bte;
wire          shared_err;
wire    [1:0] request;
reg           grant = 1'd0;
reg     [3:0] slave_sel = 4'd0;
reg     [3:0] slave_sel_r = 4'd0;
reg           error = 1'd0;
wire          wait_1;
wire          done;
reg    [19:0] count = 20'd1000000;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg           csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_r;
reg           csr_bankarray_csrbank0_reset0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_w;
reg           csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_r;
reg           csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_w;
reg           csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_r;
reg           csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_w;
wire          csr_bankarray_csrbank0_sel;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg           csr_bankarray_csrbank1_evt_hsbf_re = 1'd0;
wire          csr_bankarray_csrbank1_evt_hsbf_r;
reg           csr_bankarray_csrbank1_evt_hsbf_we = 1'd0;
wire          csr_bankarray_csrbank1_evt_hsbf_w;
reg           csr_bankarray_csrbank1_evt_lsbf_re = 1'd0;
wire          csr_bankarray_csrbank1_evt_lsbf_r;
reg           csr_bankarray_csrbank1_evt_lsbf_we = 1'd0;
wire          csr_bankarray_csrbank1_evt_lsbf_w;
reg           csr_bankarray_csrbank1_sample_dat_o_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank1_sample_dat_o_r;
reg           csr_bankarray_csrbank1_sample_dat_o_we = 1'd0;
wire   [15:0] csr_bankarray_csrbank1_sample_dat_o_w;
reg           csr_bankarray_csrbank1_address_r_re = 1'd0;
wire   [13:0] csr_bankarray_csrbank1_address_r_r;
reg           csr_bankarray_csrbank1_address_r_we = 1'd0;
wire   [13:0] csr_bankarray_csrbank1_address_r_w;
reg           csr_bankarray_csrbank1_wr_en0_re = 1'd0;
wire          csr_bankarray_csrbank1_wr_en0_r;
reg           csr_bankarray_csrbank1_wr_en0_we = 1'd0;
wire          csr_bankarray_csrbank1_wr_en0_w;
reg           csr_bankarray_csrbank1_wr_addr0_re = 1'd0;
wire   [13:0] csr_bankarray_csrbank1_wr_addr0_r;
reg           csr_bankarray_csrbank1_wr_addr0_we = 1'd0;
wire   [13:0] csr_bankarray_csrbank1_wr_addr0_w;
reg           csr_bankarray_csrbank1_data_in0_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank1_data_in0_r;
reg           csr_bankarray_csrbank1_data_in0_we = 1'd0;
wire   [15:0] csr_bankarray_csrbank1_data_in0_w;
reg           csr_bankarray_csrbank1_conf_res0_re = 1'd0;
wire    [5:0] csr_bankarray_csrbank1_conf_res0_r;
reg           csr_bankarray_csrbank1_conf_res0_we = 1'd0;
wire    [5:0] csr_bankarray_csrbank1_conf_res0_w;
reg           csr_bankarray_csrbank1_conf_ratio0_re = 1'd0;
wire   [23:0] csr_bankarray_csrbank1_conf_ratio0_r;
reg           csr_bankarray_csrbank1_conf_ratio0_we = 1'd0;
wire   [23:0] csr_bankarray_csrbank1_conf_ratio0_w;
reg           csr_bankarray_csrbank1_conf_swap0_re = 1'd0;
wire          csr_bankarray_csrbank1_conf_swap0_r;
reg           csr_bankarray_csrbank1_conf_swap0_we = 1'd0;
wire          csr_bankarray_csrbank1_conf_swap0_w;
reg           csr_bankarray_csrbank1_conf_en0_re = 1'd0;
wire          csr_bankarray_csrbank1_conf_en0_r;
reg           csr_bankarray_csrbank1_conf_en0_we = 1'd0;
wire          csr_bankarray_csrbank1_conf_en0_w;
reg           csr_bankarray_csrbank1_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank1_ev_status_r;
reg           csr_bankarray_csrbank1_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank1_ev_status_w;
reg           csr_bankarray_csrbank1_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank1_ev_pending_r;
reg           csr_bankarray_csrbank1_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank1_ev_pending_w;
reg           csr_bankarray_csrbank1_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank1_ev_enable0_r;
reg           csr_bankarray_csrbank1_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank1_ev_enable0_w;
wire          csr_bankarray_csrbank1_sel;
wire   [13:0] csr_bankarray_sram_bus_adr;
wire          csr_bankarray_sram_bus_we;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire    [5:0] csr_bankarray_adr;
wire    [7:0] csr_bankarray_dat_r;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg           csr_bankarray_csrbank2_out0_re = 1'd0;
wire          csr_bankarray_csrbank2_out0_r;
reg           csr_bankarray_csrbank2_out0_we = 1'd0;
wire          csr_bankarray_csrbank2_out0_w;
wire          csr_bankarray_csrbank2_sel;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
wire          csr_bankarray_interface3_bank_bus_we;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
reg           csr_bankarray_csrbank3_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_load0_r;
reg           csr_bankarray_csrbank3_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_load0_w;
reg           csr_bankarray_csrbank3_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_reload0_r;
reg           csr_bankarray_csrbank3_reload0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_reload0_w;
reg           csr_bankarray_csrbank3_en0_re = 1'd0;
wire          csr_bankarray_csrbank3_en0_r;
reg           csr_bankarray_csrbank3_en0_we = 1'd0;
wire          csr_bankarray_csrbank3_en0_w;
reg           csr_bankarray_csrbank3_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank3_update_value0_r;
reg           csr_bankarray_csrbank3_update_value0_we = 1'd0;
wire          csr_bankarray_csrbank3_update_value0_w;
reg           csr_bankarray_csrbank3_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_value_r;
reg           csr_bankarray_csrbank3_value_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_value_w;
reg           csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank3_ev_status_r;
reg           csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank3_ev_status_w;
reg           csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank3_ev_pending_r;
reg           csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank3_ev_pending_w;
reg           csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank3_ev_enable0_r;
reg           csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank3_ev_enable0_w;
wire          csr_bankarray_csrbank3_sel;
wire   [13:0] csr_bankarray_interface4_bank_bus_adr;
wire          csr_bankarray_interface4_bank_bus_we;
wire   [31:0] csr_bankarray_interface4_bank_bus_dat_w;
reg    [31:0] csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
reg           csr_bankarray_csrbank4_txfull_re = 1'd0;
wire          csr_bankarray_csrbank4_txfull_r;
reg           csr_bankarray_csrbank4_txfull_we = 1'd0;
wire          csr_bankarray_csrbank4_txfull_w;
reg           csr_bankarray_csrbank4_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank4_rxempty_r;
reg           csr_bankarray_csrbank4_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank4_rxempty_w;
reg           csr_bankarray_csrbank4_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_status_r;
reg           csr_bankarray_csrbank4_ev_status_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_status_w;
reg           csr_bankarray_csrbank4_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_pending_r;
reg           csr_bankarray_csrbank4_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_pending_w;
reg           csr_bankarray_csrbank4_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_enable0_r;
reg           csr_bankarray_csrbank4_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_enable0_w;
reg           csr_bankarray_csrbank4_txempty_re = 1'd0;
wire          csr_bankarray_csrbank4_txempty_r;
reg           csr_bankarray_csrbank4_txempty_we = 1'd0;
wire          csr_bankarray_csrbank4_txempty_w;
reg           csr_bankarray_csrbank4_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank4_rxfull_r;
reg           csr_bankarray_csrbank4_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank4_rxfull_w;
wire          csr_bankarray_csrbank4_sel;
wire   [13:0] csr_interconnect_adr;
wire          csr_interconnect_we;
wire   [31:0] csr_interconnect_dat_w;
wire   [31:0] csr_interconnect_dat_r;
reg           basesoc_rs232phytx_state = 1'd0;
reg           basesoc_rs232phytx_next_state = 1'd0;
reg     [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg           tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg           serial_tx_rs232phytx_next_value1 = 1'd0;
reg           serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg     [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg           tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           basesoc_rs232phyrx_state = 1'd0;
reg           basesoc_rs232phyrx_next_state = 1'd0;
reg     [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg           rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg           rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           basesoc_state = 1'd0;
reg           basesoc_next_state = 1'd0;
reg    [29:0] array_muxed0 = 30'd0;
reg    [31:0] array_muxed1 = 32'd0;
reg     [3:0] array_muxed2 = 4'd0;
reg           array_muxed3 = 1'd0;
reg           array_muxed4 = 1'd0;
reg           array_muxed5 = 1'd0;
reg     [2:0] array_muxed6 = 3'd0;
reg     [1:0] array_muxed7 = 2'd0;
reg           regs0 = 1'd0;
reg           regs1 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign lm32_reset = (soc_rst | cpu_rst);
assign bus_error = error;
always @(*) begin
    lm32_interrupt <= 32'd0;
    lm32_interrupt[1] <= timer_irq;
    lm32_interrupt[0] <= uart_irq;
end
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign lm32_ibus_dat_r = shared_dat_r;
assign lm32_dbus_dat_r = shared_dat_r;
assign lm32_ibus_ack = (shared_ack & (grant == 1'd0));
assign lm32_dbus_ack = (shared_ack & (grant == 1'd1));
assign lm32_ibus_err = (shared_err & (grant == 1'd0));
assign lm32_dbus_err = (shared_err & (grant == 1'd1));
assign request = {lm32_dbus_cyc, lm32_ibus_cyc};
always @(*) begin
    slave_sel <= 4'd0;
    slave_sel[0] <= (shared_adr[29:13] == 1'd0);
    slave_sel[1] <= (shared_adr[29:11] == 12'd2048);
    slave_sel[2] <= (shared_adr[29:12] == 17'd65536);
    slave_sel[3] <= (shared_adr[29:14] == 16'd33280);
end
assign ram_bus_adr = shared_adr;
assign ram_bus_dat_w = shared_dat_w;
assign ram_bus_sel = shared_sel;
assign ram_bus_stb = shared_stb;
assign ram_bus_we = shared_we;
assign ram_bus_cti = shared_cti;
assign ram_bus_bte = shared_bte;
assign interface0_ram_bus_adr = shared_adr;
assign interface0_ram_bus_dat_w = shared_dat_w;
assign interface0_ram_bus_sel = shared_sel;
assign interface0_ram_bus_stb = shared_stb;
assign interface0_ram_bus_we = shared_we;
assign interface0_ram_bus_cti = shared_cti;
assign interface0_ram_bus_bte = shared_bte;
assign interface1_ram_bus_adr = shared_adr;
assign interface1_ram_bus_dat_w = shared_dat_w;
assign interface1_ram_bus_sel = shared_sel;
assign interface1_ram_bus_stb = shared_stb;
assign interface1_ram_bus_we = shared_we;
assign interface1_ram_bus_cti = shared_cti;
assign interface1_ram_bus_bte = shared_bte;
assign basesoc_wishbone_adr = shared_adr;
assign basesoc_wishbone_dat_w = shared_dat_w;
assign basesoc_wishbone_sel = shared_sel;
assign basesoc_wishbone_stb = shared_stb;
assign basesoc_wishbone_we = shared_we;
assign basesoc_wishbone_cti = shared_cti;
assign basesoc_wishbone_bte = shared_bte;
assign ram_bus_cyc = (shared_cyc & slave_sel[0]);
assign interface0_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign interface1_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign basesoc_wishbone_cyc = (shared_cyc & slave_sel[3]);
assign shared_err = (((ram_bus_err | interface0_ram_bus_err) | interface1_ram_bus_err) | basesoc_wishbone_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    shared_dat_r <= 32'd0;
    shared_ack <= 1'd0;
    shared_ack <= (((ram_bus_ack | interface0_ram_bus_ack) | interface1_ram_bus_ack) | basesoc_wishbone_ack);
    shared_dat_r <= (((({32{slave_sel_r[0]}} & ram_bus_dat_r) | ({32{slave_sel_r[1]}} & interface0_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & interface1_ram_bus_dat_r)) | ({32{slave_sel_r[3]}} & basesoc_wishbone_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
        shared_ack <= 1'd1;
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign bus_errors_status = bus_errors;
always @(*) begin
    soc_rst <= 1'd0;
    if (reset_re) begin
        soc_rst <= reset_storage[0];
    end
end
assign cpu_rst = reset_storage[1];
assign csr_bankarray_csrbank0_reset0_w = reset_storage[1:0];
assign csr_bankarray_csrbank0_scratch0_w = scratch_storage[31:0];
assign csr_bankarray_csrbank0_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign adr = ram_bus_adr[12:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
    sram0_we <= 4'd0;
    sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
    sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
    sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
    sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[10:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
    sram1_we <= 4'd0;
    sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
    sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
    sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
    sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[11:0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
always @(*) begin
    tx_data_rs232phytx_next_value2 <= 8'd0;
    tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    tx_enable <= 1'd0;
    tx_sink_ready <= 1'd0;
    basesoc_rs232phytx_next_state <= 1'd0;
    tx_count_rs232phytx_next_value0 <= 4'd0;
    tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    serial_tx_rs232phytx_next_value1 <= 1'd0;
    serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    basesoc_rs232phytx_next_state <= basesoc_rs232phytx_state;
    case (basesoc_rs232phytx_state)
        1'd1: begin
            tx_enable <= 1'd1;
            if (tx_tick) begin
                serial_tx_rs232phytx_next_value1 <= tx_data;
                serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
                tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((tx_count == 4'd9)) begin
                    tx_sink_ready <= 1'd1;
                    basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            tx_count_rs232phytx_next_value0 <= 1'd0;
            tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            serial_tx_rs232phytx_next_value1 <= 1'd1;
            serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (tx_sink_valid) begin
                serial_tx_rs232phytx_next_value1 <= 1'd0;
                serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    rx_source_valid <= 1'd0;
    basesoc_rs232phyrx_next_state <= 1'd0;
    rx_count_rs232phyrx_next_value0 <= 4'd0;
    rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    rx_source_payload_data <= 8'd0;
    rx_enable <= 1'd0;
    rx_data_rs232phyrx_next_value1 <= 8'd0;
    basesoc_rs232phyrx_next_state <= basesoc_rs232phyrx_state;
    case (basesoc_rs232phyrx_state)
        1'd1: begin
            rx_enable <= 1'd1;
            if (rx_tick) begin
                rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
                rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
                rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((rx_count == 4'd9)) begin
                    rx_source_valid <= (rx_rx == 1'd1);
                    rx_source_payload_data <= rx_data;
                    basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            rx_count_rs232phyrx_next_value0 <= 1'd0;
            rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
                basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rx_source_first;
assign uart_uart_sink_last = rx_source_last;
assign uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_uart_source_first;
assign tx_sink_last = uart_uart_source_last;
assign tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
    uart_tx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[0])) begin
        uart_tx_clear <= 1'd1;
    end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
    uart_rx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[1])) begin
        uart_rx_clear <= 1'd1;
    end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
    uart_tx_fifo_wrport_adr <= 4'd0;
    if (uart_tx_fifo_replace) begin
        uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
    end else begin
        uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
    end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
    uart_rx_fifo_wrport_adr <= 4'd0;
    if (uart_rx_fifo_replace) begin
        uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
    end else begin
        uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
    end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
    timer_zero_clear <= 1'd0;
    if ((timer_pending_re & timer_pending_r)) begin
        timer_zero_clear <= 1'd1;
    end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sys_clk = clk25;
assign por_clk = clk25;
assign sys_rst = int_rst;
assign {user_led0} = storage;
assign ok0 = ok_status;
assign ok1 = ok_pending;
always @(*) begin
    ok_clear <= 1'd0;
    if ((pending_re & pending_r)) begin
        ok_clear <= 1'd1;
    end
end
assign irq = (pending_status & enable_storage);
assign ok_status = ok_trigger;
always @(*) begin
    basesoc_we <= 1'd0;
    basesoc_wishbone_ack <= 1'd0;
    basesoc_dat_w <= 32'd0;
    basesoc_wishbone_dat_r <= 32'd0;
    basesoc_next_state <= 1'd0;
    basesoc_adr <= 14'd0;
    basesoc_next_state <= basesoc_state;
    case (basesoc_state)
        1'd1: begin
            basesoc_wishbone_ack <= 1'd1;
            basesoc_wishbone_dat_r <= basesoc_dat_r;
            basesoc_next_state <= 1'd0;
        end
        default: begin
            basesoc_dat_w <= basesoc_wishbone_dat_w;
            if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
                basesoc_adr <= basesoc_wishbone_adr;
                basesoc_we <= (basesoc_wishbone_we & (basesoc_wishbone_sel != 1'd0));
                basesoc_next_state <= 1'd1;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 2'd2);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_reset0_re <= 1'd0;
    csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_reset0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_scratch0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_bus_errors_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd1);
assign csr_bankarray_csrbank1_evt_hsbf_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_evt_hsbf_we <= 1'd0;
    csr_bankarray_csrbank1_evt_hsbf_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_evt_hsbf_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_evt_hsbf_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_evt_lsbf_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_evt_lsbf_we <= 1'd0;
    csr_bankarray_csrbank1_evt_lsbf_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_evt_lsbf_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_evt_lsbf_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_sample_dat_o_r = csr_bankarray_interface1_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank1_sample_dat_o_re <= 1'd0;
    csr_bankarray_csrbank1_sample_dat_o_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_sample_dat_o_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_sample_dat_o_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_address_r_r = csr_bankarray_interface1_bank_bus_dat_w[13:0];
always @(*) begin
    csr_bankarray_csrbank1_address_r_re <= 1'd0;
    csr_bankarray_csrbank1_address_r_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank1_address_r_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_address_r_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_wr_en0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_wr_en0_we <= 1'd0;
    csr_bankarray_csrbank1_wr_en0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank1_wr_en0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_wr_en0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_wr_addr0_r = csr_bankarray_interface1_bank_bus_dat_w[13:0];
always @(*) begin
    csr_bankarray_csrbank1_wr_addr0_we <= 1'd0;
    csr_bankarray_csrbank1_wr_addr0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank1_wr_addr0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_wr_addr0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_data_in0_r = csr_bankarray_interface1_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank1_data_in0_re <= 1'd0;
    csr_bankarray_csrbank1_data_in0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank1_data_in0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_data_in0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_conf_res0_r = csr_bankarray_interface1_bank_bus_dat_w[5:0];
always @(*) begin
    csr_bankarray_csrbank1_conf_res0_we <= 1'd0;
    csr_bankarray_csrbank1_conf_res0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank1_conf_res0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_conf_res0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_conf_ratio0_r = csr_bankarray_interface1_bank_bus_dat_w[23:0];
always @(*) begin
    csr_bankarray_csrbank1_conf_ratio0_re <= 1'd0;
    csr_bankarray_csrbank1_conf_ratio0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd8))) begin
        csr_bankarray_csrbank1_conf_ratio0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_conf_ratio0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_conf_swap0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_conf_swap0_re <= 1'd0;
    csr_bankarray_csrbank1_conf_swap0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd9))) begin
        csr_bankarray_csrbank1_conf_swap0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_conf_swap0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_conf_en0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_conf_en0_we <= 1'd0;
    csr_bankarray_csrbank1_conf_en0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd10))) begin
        csr_bankarray_csrbank1_conf_en0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_conf_en0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_ev_status_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_ev_status_re <= 1'd0;
    csr_bankarray_csrbank1_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd11))) begin
        csr_bankarray_csrbank1_ev_status_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_ev_status_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_ev_pending_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank1_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd12))) begin
        csr_bankarray_csrbank1_ev_pending_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_ev_pending_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_ev_enable0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_ev_enable0_we <= 1'd0;
    csr_bankarray_csrbank1_ev_enable0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd13))) begin
        csr_bankarray_csrbank1_ev_enable0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_ev_enable0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_evt_hsbf_w = evt_hsbf_status;
assign evt_hsbf_we = csr_bankarray_csrbank1_evt_hsbf_we;
assign csr_bankarray_csrbank1_evt_lsbf_w = evt_lsbf_status;
assign evt_lsbf_we = csr_bankarray_csrbank1_evt_lsbf_we;
assign csr_bankarray_csrbank1_sample_dat_o_w = sample_dat_o_status[15:0];
assign sample_dat_o_we = csr_bankarray_csrbank1_sample_dat_o_we;
assign csr_bankarray_csrbank1_address_r_w = address_r_status[13:0];
assign address_r_we = csr_bankarray_csrbank1_address_r_we;
assign csr_bankarray_csrbank1_wr_en0_w = wr_en_storage;
assign csr_bankarray_csrbank1_wr_addr0_w = wr_addr_storage[13:0];
assign csr_bankarray_csrbank1_data_in0_w = data_in_storage[15:0];
assign csr_bankarray_csrbank1_conf_res0_w = conf_res_storage[5:0];
assign csr_bankarray_csrbank1_conf_ratio0_w = conf_ratio_storage[23:0];
assign csr_bankarray_csrbank1_conf_swap0_w = conf_swap_storage;
assign csr_bankarray_csrbank1_conf_en0_w = conf_en_storage;
assign status_status = ok0;
assign csr_bankarray_csrbank1_ev_status_w = status_status;
assign status_we = csr_bankarray_csrbank1_ev_status_we;
assign pending_status = ok1;
assign csr_bankarray_csrbank1_ev_pending_w = pending_status;
assign pending_we = csr_bankarray_csrbank1_ev_pending_we;
assign ok2 = enable_storage;
assign csr_bankarray_csrbank1_ev_enable0_w = enable_storage;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 2'd3);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank2_out0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_out0_re <= 1'd0;
    csr_bankarray_csrbank2_out0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_out0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_out0_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_out0_w = storage;
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign csr_bankarray_csrbank3_load0_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_load0_re <= 1'd0;
    csr_bankarray_csrbank3_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank3_load0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_load0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_reload0_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_reload0_we <= 1'd0;
    csr_bankarray_csrbank3_reload0_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank3_reload0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_reload0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_en0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_en0_we <= 1'd0;
    csr_bankarray_csrbank3_en0_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank3_en0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_en0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_update_value0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_update_value0_re <= 1'd0;
    csr_bankarray_csrbank3_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank3_update_value0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_update_value0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_value_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_value_we <= 1'd0;
    csr_bankarray_csrbank3_value_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank3_value_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_value_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_ev_status_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank3_ev_status_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_status_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_ev_pending_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank3_ev_pending_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_pending_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_ev_enable0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank3_ev_enable0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_enable0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_load0_w = timer_load_storage[31:0];
assign csr_bankarray_csrbank3_reload0_w = timer_reload_storage[31:0];
assign csr_bankarray_csrbank3_en0_w = timer_en_storage;
assign csr_bankarray_csrbank3_update_value0_w = timer_update_value_storage;
assign csr_bankarray_csrbank3_value_w = timer_value_status[31:0];
assign timer_value_we = csr_bankarray_csrbank3_value_we;
assign timer_status_status = timer_zero0;
assign csr_bankarray_csrbank3_ev_status_w = timer_status_status;
assign timer_status_we = csr_bankarray_csrbank3_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csr_bankarray_csrbank3_ev_pending_w = timer_pending_status;
assign timer_pending_we = csr_bankarray_csrbank3_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csr_bankarray_csrbank3_ev_enable0_w = timer_enable_storage;
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign uart_rxtx_r = csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    uart_rxtx_re <= 1'd0;
    uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_re <= csr_bankarray_interface4_bank_bus_we;
        uart_rxtx_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_txfull_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_txfull_we <= 1'd0;
    csr_bankarray_csrbank4_txfull_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank4_txfull_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_txfull_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_rxempty_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_rxempty_re <= 1'd0;
    csr_bankarray_csrbank4_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank4_rxempty_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_rxempty_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_ev_status_r = csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank4_ev_status_re <= 1'd0;
    csr_bankarray_csrbank4_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank4_ev_status_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_ev_status_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_ev_pending_r = csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank4_ev_pending_we <= 1'd0;
    csr_bankarray_csrbank4_ev_pending_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank4_ev_pending_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_ev_pending_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_ev_enable0_r = csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank4_ev_enable0_we <= 1'd0;
    csr_bankarray_csrbank4_ev_enable0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank4_ev_enable0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_ev_enable0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_txempty_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_txempty_re <= 1'd0;
    csr_bankarray_csrbank4_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank4_txempty_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_txempty_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_rxfull_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_rxfull_we <= 1'd0;
    csr_bankarray_csrbank4_rxfull_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank4_rxfull_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_rxfull_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_txfull_w = uart_txfull_status;
assign uart_txfull_we = csr_bankarray_csrbank4_txfull_we;
assign csr_bankarray_csrbank4_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csr_bankarray_csrbank4_rxempty_we;
always @(*) begin
    uart_status_status <= 2'd0;
    uart_status_status[0] <= uart_tx0;
    uart_status_status[1] <= uart_rx0;
end
assign csr_bankarray_csrbank4_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csr_bankarray_csrbank4_ev_status_we;
always @(*) begin
    uart_pending_status <= 2'd0;
    uart_pending_status[0] <= uart_tx1;
    uart_pending_status[1] <= uart_rx1;
end
assign csr_bankarray_csrbank4_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csr_bankarray_csrbank4_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csr_bankarray_csrbank4_ev_enable0_w = uart_enable_storage[1:0];
assign csr_bankarray_csrbank4_txempty_w = uart_txempty_status;
assign uart_txempty_we = csr_bankarray_csrbank4_txempty_we;
assign csr_bankarray_csrbank4_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csr_bankarray_csrbank4_rxfull_we;
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    array_muxed0 <= 30'd0;
    case (grant)
        1'd0: begin
            array_muxed0 <= lm32_ibus_adr;
        end
        default: begin
            array_muxed0 <= lm32_dbus_adr;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 32'd0;
    case (grant)
        1'd0: begin
            array_muxed1 <= lm32_ibus_dat_w;
        end
        default: begin
            array_muxed1 <= lm32_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 4'd0;
    case (grant)
        1'd0: begin
            array_muxed2 <= lm32_ibus_sel;
        end
        default: begin
            array_muxed2 <= lm32_dbus_sel;
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed3 <= lm32_ibus_cyc;
        end
        default: begin
            array_muxed3 <= lm32_dbus_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed4 <= lm32_ibus_stb;
        end
        default: begin
            array_muxed4 <= lm32_dbus_stb;
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed5 <= lm32_ibus_we;
        end
        default: begin
            array_muxed5 <= lm32_dbus_we;
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 3'd0;
    case (grant)
        1'd0: begin
            array_muxed6 <= lm32_ibus_cti;
        end
        default: begin
            array_muxed6 <= lm32_dbus_cti;
        end
    endcase
end
always @(*) begin
    array_muxed7 <= 2'd0;
    case (grant)
        1'd0: begin
            array_muxed7 <= lm32_ibus_bte;
        end
        default: begin
            array_muxed7 <= lm32_dbus_bte;
        end
    endcase
end
assign rx_rx = regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= (~user_btn_n);
end

always @(posedge sys_clk) begin
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end
            end
        end
    endcase
    slave_sel_r <= slave_sel;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((bus_errors != 32'd4294967295)) begin
        if (bus_error) begin
            bus_errors <= (bus_errors + 1'd1);
        end
    end
    if (csr_bankarray_csrbank0_reset0_re) begin
        reset_storage[1:0] <= csr_bankarray_csrbank0_reset0_r;
    end
    reset_re <= csr_bankarray_csrbank0_reset0_re;
    if (csr_bankarray_csrbank0_scratch0_re) begin
        scratch_storage[31:0] <= csr_bankarray_csrbank0_scratch0_r;
    end
    scratch_re <= csr_bankarray_csrbank0_scratch0_re;
    bus_errors_re <= csr_bankarray_csrbank0_bus_errors_re;
    ram_bus_ack <= 1'd0;
    if (((ram_bus_cyc & ram_bus_stb) & ((~ram_bus_ack) | adr_burst))) begin
        ram_bus_ack <= 1'd1;
    end
    interface0_ram_bus_ack <= 1'd0;
    if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & ((~interface0_ram_bus_ack) | sram0_adr_burst))) begin
        interface0_ram_bus_ack <= 1'd1;
    end
    interface1_ram_bus_ack <= 1'd0;
    if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & ((~interface1_ram_bus_ack) | sram1_adr_burst))) begin
        interface1_ram_bus_ack <= 1'd1;
    end
    {tx_tick, tx_phase} <= 25'd19791209;
    if (tx_enable) begin
        {tx_tick, tx_phase} <= (tx_phase + 25'd19791209);
    end
    basesoc_rs232phytx_state <= basesoc_rs232phytx_next_state;
    if (tx_count_rs232phytx_next_value_ce0) begin
        tx_count <= tx_count_rs232phytx_next_value0;
    end
    if (serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= serial_tx_rs232phytx_next_value1;
    end
    if (tx_data_rs232phytx_next_value_ce2) begin
        tx_data <= tx_data_rs232phytx_next_value2;
    end
    rx_rx_d <= rx_rx;
    {rx_tick, rx_phase} <= 32'd2147483648;
    if (rx_enable) begin
        {rx_tick, rx_phase} <= (rx_phase + 25'd19791209);
    end
    basesoc_rs232phyrx_state <= basesoc_rs232phyrx_next_state;
    if (rx_count_rs232phyrx_next_value_ce0) begin
        rx_count <= rx_count_rs232phyrx_next_value0;
    end
    if (rx_data_rs232phyrx_next_value_ce1) begin
        rx_data <= rx_data_rs232phyrx_next_value1;
    end
    if (uart_tx_clear) begin
        uart_tx_pending <= 1'd0;
    end
    uart_tx_trigger_d <= uart_tx_trigger;
    if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
        uart_tx_pending <= 1'd1;
    end
    if (uart_rx_clear) begin
        uart_rx_pending <= 1'd0;
    end
    uart_rx_trigger_d <= uart_rx_trigger;
    if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
        uart_rx_pending <= 1'd1;
    end
    if (uart_tx_fifo_syncfifo_re) begin
        uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (uart_tx_fifo_re) begin
            uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
    end
    if (uart_tx_fifo_do_read) begin
        uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        if ((~uart_tx_fifo_do_read)) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_tx_fifo_do_read) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (uart_rx_fifo_syncfifo_re) begin
        uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (uart_rx_fifo_re) begin
            uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
    end
    if (uart_rx_fifo_do_read) begin
        uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        if ((~uart_rx_fifo_do_read)) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_rx_fifo_do_read) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (timer_en_storage) begin
        if ((timer_value == 1'd0)) begin
            timer_value <= timer_reload_storage;
        end else begin
            timer_value <= (timer_value - 1'd1);
        end
    end else begin
        timer_value <= timer_load_storage;
    end
    if (timer_update_value_re) begin
        timer_value_status <= timer_value;
    end
    if (timer_zero_clear) begin
        timer_zero_pending <= 1'd0;
    end
    timer_zero_trigger_d <= timer_zero_trigger;
    if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
        timer_zero_pending <= 1'd1;
    end
    if (ok_clear) begin
        ok_pending <= 1'd0;
    end
    ok_trigger_d <= ok_trigger;
    if (((~ok_trigger) & ok_trigger_d)) begin
        ok_pending <= 1'd1;
    end
    basesoc_state <= basesoc_next_state;
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_evt_hsbf_w;
            end
            1'd1: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_evt_lsbf_w;
            end
            2'd2: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_sample_dat_o_w;
            end
            2'd3: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_address_r_w;
            end
            3'd4: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_wr_en0_w;
            end
            3'd5: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_wr_addr0_w;
            end
            3'd6: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_data_in0_w;
            end
            3'd7: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_conf_res0_w;
            end
            4'd8: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_conf_ratio0_w;
            end
            4'd9: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_conf_swap0_w;
            end
            4'd10: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_conf_en0_w;
            end
            4'd11: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_status_w;
            end
            4'd12: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_pending_w;
            end
            4'd13: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_enable0_w;
            end
        endcase
    end
    evt_hsbf_re <= csr_bankarray_csrbank1_evt_hsbf_re;
    evt_lsbf_re <= csr_bankarray_csrbank1_evt_lsbf_re;
    sample_dat_o_re <= csr_bankarray_csrbank1_sample_dat_o_re;
    address_r_re <= csr_bankarray_csrbank1_address_r_re;
    if (csr_bankarray_csrbank1_wr_en0_re) begin
        wr_en_storage <= csr_bankarray_csrbank1_wr_en0_r;
    end
    wr_en_re <= csr_bankarray_csrbank1_wr_en0_re;
    if (csr_bankarray_csrbank1_wr_addr0_re) begin
        wr_addr_storage[13:0] <= csr_bankarray_csrbank1_wr_addr0_r;
    end
    wr_addr_re <= csr_bankarray_csrbank1_wr_addr0_re;
    if (csr_bankarray_csrbank1_data_in0_re) begin
        data_in_storage[15:0] <= csr_bankarray_csrbank1_data_in0_r;
    end
    data_in_re <= csr_bankarray_csrbank1_data_in0_re;
    if (csr_bankarray_csrbank1_conf_res0_re) begin
        conf_res_storage[5:0] <= csr_bankarray_csrbank1_conf_res0_r;
    end
    conf_res_re <= csr_bankarray_csrbank1_conf_res0_re;
    if (csr_bankarray_csrbank1_conf_ratio0_re) begin
        conf_ratio_storage[23:0] <= csr_bankarray_csrbank1_conf_ratio0_r;
    end
    conf_ratio_re <= csr_bankarray_csrbank1_conf_ratio0_re;
    if (csr_bankarray_csrbank1_conf_swap0_re) begin
        conf_swap_storage <= csr_bankarray_csrbank1_conf_swap0_r;
    end
    conf_swap_re <= csr_bankarray_csrbank1_conf_swap0_re;
    if (csr_bankarray_csrbank1_conf_en0_re) begin
        conf_en_storage <= csr_bankarray_csrbank1_conf_en0_r;
    end
    conf_en_re <= csr_bankarray_csrbank1_conf_en0_re;
    status_re <= csr_bankarray_csrbank1_ev_status_re;
    if (csr_bankarray_csrbank1_ev_pending_re) begin
        pending_r <= csr_bankarray_csrbank1_ev_pending_r;
    end
    pending_re <= csr_bankarray_csrbank1_ev_pending_re;
    if (csr_bankarray_csrbank1_ev_enable0_re) begin
        enable_storage <= csr_bankarray_csrbank1_ev_enable0_r;
    end
    enable_re <= csr_bankarray_csrbank1_ev_enable0_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_out0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank2_out0_re) begin
        storage <= csr_bankarray_csrbank2_out0_r;
    end
    re <= csr_bankarray_csrbank2_out0_re;
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_value_w;
            end
            3'd5: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank3_load0_re) begin
        timer_load_storage[31:0] <= csr_bankarray_csrbank3_load0_r;
    end
    timer_load_re <= csr_bankarray_csrbank3_load0_re;
    if (csr_bankarray_csrbank3_reload0_re) begin
        timer_reload_storage[31:0] <= csr_bankarray_csrbank3_reload0_r;
    end
    timer_reload_re <= csr_bankarray_csrbank3_reload0_re;
    if (csr_bankarray_csrbank3_en0_re) begin
        timer_en_storage <= csr_bankarray_csrbank3_en0_r;
    end
    timer_en_re <= csr_bankarray_csrbank3_en0_re;
    if (csr_bankarray_csrbank3_update_value0_re) begin
        timer_update_value_storage <= csr_bankarray_csrbank3_update_value0_r;
    end
    timer_update_value_re <= csr_bankarray_csrbank3_update_value0_re;
    timer_value_re <= csr_bankarray_csrbank3_value_re;
    timer_status_re <= csr_bankarray_csrbank3_ev_status_re;
    if (csr_bankarray_csrbank3_ev_pending_re) begin
        timer_pending_r <= csr_bankarray_csrbank3_ev_pending_r;
    end
    timer_pending_re <= csr_bankarray_csrbank3_ev_pending_re;
    if (csr_bankarray_csrbank3_ev_enable0_re) begin
        timer_enable_storage <= csr_bankarray_csrbank3_ev_enable0_r;
    end
    timer_enable_re <= csr_bankarray_csrbank3_ev_enable0_re;
    csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank4_sel) begin
        case (csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface4_bank_bus_dat_r <= uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_rxfull_w;
            end
        endcase
    end
    uart_txfull_re <= csr_bankarray_csrbank4_txfull_re;
    uart_rxempty_re <= csr_bankarray_csrbank4_rxempty_re;
    uart_status_re <= csr_bankarray_csrbank4_ev_status_re;
    if (csr_bankarray_csrbank4_ev_pending_re) begin
        uart_pending_r[1:0] <= csr_bankarray_csrbank4_ev_pending_r;
    end
    uart_pending_re <= csr_bankarray_csrbank4_ev_pending_re;
    if (csr_bankarray_csrbank4_ev_enable0_re) begin
        uart_enable_storage[1:0] <= csr_bankarray_csrbank4_ev_enable0_r;
    end
    uart_enable_re <= csr_bankarray_csrbank4_ev_enable0_re;
    uart_txempty_re <= csr_bankarray_csrbank4_txempty_re;
    uart_rxfull_re <= csr_bankarray_csrbank4_rxfull_re;
    if (sys_rst) begin
        reset_storage <= 2'd0;
        reset_re <= 1'd0;
        scratch_storage <= 32'd305419896;
        scratch_re <= 1'd0;
        bus_errors_re <= 1'd0;
        bus_errors <= 32'd0;
        ram_bus_ack <= 1'd0;
        interface0_ram_bus_ack <= 1'd0;
        interface1_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        tx_tick <= 1'd0;
        rx_tick <= 1'd0;
        rx_rx_d <= 1'd0;
        uart_txfull_re <= 1'd0;
        uart_rxempty_re <= 1'd0;
        uart_tx_pending <= 1'd0;
        uart_tx_trigger_d <= 1'd0;
        uart_rx_pending <= 1'd0;
        uart_rx_trigger_d <= 1'd0;
        uart_status_re <= 1'd0;
        uart_pending_re <= 1'd0;
        uart_pending_r <= 2'd0;
        uart_enable_storage <= 2'd0;
        uart_enable_re <= 1'd0;
        uart_txempty_re <= 1'd0;
        uart_rxfull_re <= 1'd0;
        uart_tx_fifo_readable <= 1'd0;
        uart_tx_fifo_level0 <= 5'd0;
        uart_tx_fifo_produce <= 4'd0;
        uart_tx_fifo_consume <= 4'd0;
        uart_rx_fifo_readable <= 1'd0;
        uart_rx_fifo_level0 <= 5'd0;
        uart_rx_fifo_produce <= 4'd0;
        uart_rx_fifo_consume <= 4'd0;
        timer_load_storage <= 32'd0;
        timer_load_re <= 1'd0;
        timer_reload_storage <= 32'd0;
        timer_reload_re <= 1'd0;
        timer_en_storage <= 1'd0;
        timer_en_re <= 1'd0;
        timer_update_value_storage <= 1'd0;
        timer_update_value_re <= 1'd0;
        timer_value_status <= 32'd0;
        timer_value_re <= 1'd0;
        timer_zero_pending <= 1'd0;
        timer_zero_trigger_d <= 1'd0;
        timer_status_re <= 1'd0;
        timer_pending_re <= 1'd0;
        timer_pending_r <= 1'd0;
        timer_enable_storage <= 1'd0;
        timer_enable_re <= 1'd0;
        timer_value <= 32'd0;
        storage <= 1'd0;
        re <= 1'd0;
        evt_hsbf_re <= 1'd0;
        evt_lsbf_re <= 1'd0;
        sample_dat_o_re <= 1'd0;
        address_r_re <= 1'd0;
        wr_en_storage <= 1'd0;
        wr_en_re <= 1'd0;
        wr_addr_storage <= 14'd0;
        wr_addr_re <= 1'd0;
        data_in_storage <= 16'd0;
        data_in_re <= 1'd0;
        conf_res_storage <= 6'd0;
        conf_res_re <= 1'd0;
        conf_ratio_storage <= 24'd0;
        conf_ratio_re <= 1'd0;
        conf_swap_storage <= 1'd0;
        conf_swap_re <= 1'd0;
        conf_en_storage <= 1'd0;
        conf_en_re <= 1'd0;
        ok_pending <= 1'd0;
        ok_trigger_d <= 1'd0;
        status_re <= 1'd0;
        pending_re <= 1'd0;
        pending_r <= 1'd0;
        enable_storage <= 1'd0;
        enable_re <= 1'd0;
        grant <= 1'd0;
        slave_sel_r <= 4'd0;
        count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        basesoc_rs232phytx_state <= 1'd0;
        basesoc_rs232phyrx_state <= 1'd0;
        basesoc_state <= 1'd0;
    end
    regs0 <= serial_rx;
    regs1 <= regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 5982-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:5981];
initial begin
	$readmemh("cain_test_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[adr];
end
assign dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("cain_test_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (sram0_we[0])
		sram[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		sram[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		sram[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		sram[sram0_adr][31:24] <= sram0_dat_w[31:24];
	sram_adr0 <= sram0_adr;
end
assign sram0_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory main_ram: 4096-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] main_ram[0:4095];
initial begin
	$readmemh("cain_test_main_ram.init", main_ram);
end
reg [11:0] main_ram_adr0;
always @(posedge sys_clk) begin
	if (sram1_we[0])
		main_ram[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		main_ram[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		main_ram[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		main_ram[sram1_adr][31:24] <= sram1_dat_w[31:24];
	main_ram_adr0 <= sram1_adr;
end
assign sram1_dat_r = main_ram[main_ram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 40-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:39];
initial begin
	$readmemh("cain_test_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage_1[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_2[0:15];
reg [9:0] storage_2_dat0;
reg [9:0] storage_2_dat1;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_2[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		storage_2_dat1 <= storage_2[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_2_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_2_dat1;


i2s_topm i2s_topm(
	.conf_en(conf_en_storage),
	.conf_ratio(conf_ratio_storage),
	.conf_res(conf_res_storage),
	.conf_swap(conf_swap_storage),
	.data_in(data_in_storage),
	.i2s_sd_i(i2s_pins1_i2s_sd_i),
	.wb_clk(sys_clk),
	.wb_rst(sys_rst),
	.wr_addr(wr_addr_storage),
	.wr_en(wr_en_storage),
	.address_r(address_r_status),
	.evt_hsbf(evt_hsbf_status),
	.evt_lsbf(evt_lsbf_status),
	.i2s_sck(i2s_pins1_i2s_sck),
	.i2s_sd(i2s_pins1_i2s_sd),
	.i2s_ws(i2s_pins1_i2s_ws),
	.sample_dat_o(sample_dat_o_status)
);

lm32_cpu #(
	.eba_reset(32'h00000000)
) lm32_cpu (
	.D_ACK_I(lm32_dbus_ack),
	.D_DAT_I(lm32_dbus_dat_r),
	.D_ERR_I(lm32_dbus_err),
	.D_RTY_I(1'd0),
	.I_ACK_I(lm32_ibus_ack),
	.I_DAT_I(lm32_ibus_dat_r),
	.I_ERR_I(lm32_ibus_err),
	.I_RTY_I(1'd0),
	.clk_i(sys_clk),
	.interrupt(lm32_interrupt),
	.rst_i((sys_rst | lm32_reset)),
	.D_ADR_O({lm32_dbus_adr, lm321}),
	.D_BTE_O(lm32_dbus_bte),
	.D_CTI_O(lm32_dbus_cti),
	.D_CYC_O(lm32_dbus_cyc),
	.D_DAT_O(lm32_dbus_dat_w),
	.D_SEL_O(lm32_dbus_sel),
	.D_STB_O(lm32_dbus_stb),
	.D_WE_O(lm32_dbus_we),
	.I_ADR_O({lm32_ibus_adr, lm320}),
	.I_BTE_O(lm32_ibus_bte),
	.I_CTI_O(lm32_ibus_cti),
	.I_CYC_O(lm32_ibus_cyc),
	.I_DAT_O(lm32_ibus_dat_w),
	.I_SEL_O(lm32_ibus_sel),
	.I_STB_O(lm32_ibus_stb),
	.I_WE_O(lm32_ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-06-26 18:53:12.
//------------------------------------------------------------------------------
